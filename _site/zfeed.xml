<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>学习笔记</title>
    <description>Read Think Create.</description>
    <link>http://zhenghua.info/</link>
    <atom:link href="http://zhenghua.info/zfeed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 27 Aug 2016 12:24:12 +0800</pubDate>
    <lastBuildDate>Sat, 27 Aug 2016 12:24:12 +0800</lastBuildDate>
    <generator>Jekyll v2.5.2</generator>
    
      <item>
        <title>Netlix Dynomite性能基准测试，基于AWS和Redis</title>
        <description>&lt;p&gt;去年，Netflix云数据库(CDE)团队推出了&lt;a href=&quot;http://techblog.netflix.com/2014/11/introducing-dynomite.html&quot;&gt;Dynomite&lt;/a&gt;。Dynomite是一个代理层，旨在将任意非分布式的数据库转化为分片、多区域的分布式数据库系统。Dynomite提供高可用性，通过&lt;a href=&quot;http://techblog.netflix.com/2013/12/active-active-for-multi-regional.html&quot;&gt;Active-Active&lt;/a&gt;设置，即便AWS中整个region失效了，仍然能够正常工作。&lt;/p&gt;

&lt;p&gt;Netflix已经在生产系统里部署了Dynomite。在系列博客文章中，Netflix详细描述了Dynomite的使用场景和特性。例如在&lt;a href=&quot;http://techblog.netflix.com/2016/01/dynomite-with-redis-on-aws-benchmarks_14.html&quot;&gt;第一篇&lt;/a&gt;里，我们可以了解Dynomite帮助Redis在AWS上线性扩展的细节。&lt;/p&gt;

&lt;p&gt;Dynomite能够将最终一致性(eventual consistency)扩展为&lt;a href=&quot;https://github.com/Netflix/dynomite/wiki/Consistency&quot;&gt;协调一致性&lt;/a&gt;(tunable consistency)。使用DC_ONE模式，读写行为在local Availability Zone(AZ)下是同步的；使用DC_QUORUM模式，本地区域特定数量结点下的操作是同步的。&lt;/p&gt;

&lt;p&gt;由测试得到的结果，Dynomite能从3，6，12，24一路扩展到48个节点，在DC_ONE和DC_QUORUM模式下，吞吐率都能线性地增长。与此同时，Dynomite在延迟方面只增加了很少的开支，即便在DC_QUORUM模式下，(延迟)也只有几毫秒。DC_QUORUM模式在延迟和吞吐量方面处于劣势，但是能为客户提供更好的读写保证。&lt;/p&gt;

&lt;p&gt;最后，Dynomite也支持Redis&lt;a href=&quot;http://redis.io/topics/pipelining&quot;&gt;管道&lt;/a&gt;，能够批量地处理请求，从而提升高达50%的性能。Dynomite通过提升吞吐量来减少延迟，从用户的角度讲，这是具有现实意义的。&lt;/p&gt;

&lt;p&gt;该&lt;a href=&quot;http://techblog.netflix.com/2016/01/dynomite-with-redis-on-aws-benchmarks_14.html&quot;&gt;博客系列&lt;/a&gt;的下一篇文章，是关于Dynomite中的逆熵处理问题，以及如何获取更好的一致性。&lt;/p&gt;
</description>
        <pubDate>Wed, 13 Jul 2016 00:00:00 +0800</pubDate>
        <link>http://zhenghua.info/%E8%A1%8C%E4%B8%9A/2016/07/13/Benchmarking_netflix_dynomite.html</link>
        <guid isPermaLink="true">http://zhenghua.info/%E8%A1%8C%E4%B8%9A/2016/07/13/Benchmarking_netflix_dynomite.html</guid>
        
        <category>Dynomite</category>
        
        
        <category>行业</category>
        
      </item>
    
      <item>
        <title>政治和文学-书摘</title>
        <description>一般来说，人们说某本小说“重要”，是因为它抨击了社会现状，或者说它引入了某种技巧上的创新。

佩剑的人会死于剑，没佩剑的人会死于疾病

文明而安全的生活的一个后果是，人们会过度敏感，这会使所有主要的感情显得可恶。慷慨跟吝啬一样让人难受，知恩图报与忘恩负义同样招人恨。

将工厂国有化，取缔教会，颁布革命的命令，并不能使军队更有战斗力。(西班牙)法西斯之所以能赢，是因为他们拥有现代化的武器，而政府军没有。任何政治策略都解决不了这个问题。


在我们这个时代，政治演讲与政治写作多半是在为不可辩护的东西做辩护。对英国继续在印度实行殖民统治、俄国的清洗和流放、在日本扔原子弹这类事情，的确可以辩护，但是，辩护所用的论据，必定是极端残忍，以至于绝大多数人无法面对，并且是跟正当所宣示的目的是不相符合的。所以，政治语言不得不主要由委婉式、祈求问题式和纯属云山雾罩式的说法组成。


托尔斯泰跟李尔王更深层次的相似之处在于，他们都是出于错误的动机，也没有得到所希望的生活。在托尔斯泰看来，每个人生活的目的，是追求幸福，而要得到幸福，只有按上帝的要求去做。但是按照上帝的要求去做事，就意味着要弃绝一切人间的快乐和野心，只为他人而活着。

假如你的这边脸挨了打，你又把那边脸转过去，就会受到更猛烈的一击。并不一定总是如此，但你应该预计到这种情况，而且当它真的发生时，你也不该抱怨。你挨的第二次击打，是你把那边脸转过去这一行为本身的一部分。

这些戏剧都首先以人道主义的假定开始，即生活尽管充满痛苦，仍然值得一活。

绝大多数人都从生活中得到不少乐趣，但总的来说，生活是痛苦的，只有年轻人或者极愚蠢的人才不这么看。

通观他的剧作，凡是尖锐批评社会的人，凡是不受通行的谎言所欺骗的人，不是小丑，就是恶棍疯子，或者是装疯卖傻的人，再不就是处于癫狂状态的人。

如果你待在正在沉没的船上，那你的思想必定会围着沉船打转。

所有的圣人，在被证明清白之前，都应当被判定为有罪

在对甘地这样的人进行评判的时候，人们往往会不自觉地适用较高的标准，以至于忽视了他的一些优点

判定文学作品的高下，除了看它流传时间的长短，没有任何别的标准－－流传的时间本身，就是反映多数人意见的指标。




</description>
        <pubDate>Tue, 28 Jun 2016 00:00:00 +0800</pubDate>
        <link>http://zhenghua.info/%E4%B9%A6%E6%91%98/2016/06/28/politics_and_novels.html</link>
        <guid isPermaLink="true">http://zhenghua.info/%E4%B9%A6%E6%91%98/2016/06/28/politics_and_novels.html</guid>
        
        <category>随笔</category>
        
        
        <category>书摘</category>
        
      </item>
    
      <item>
        <title>为什么应该租赁而不是创建离岸团队</title>
        <description>&lt;p&gt;关于离岸开发中心的运用，有几篇文章提到”拥有”比”租赁”更具优势。平心而论，这些文章写得不错，但是我并不赞成创建自己的开发中心要优于外包的观点。我在圣迭戈拥有外包公司以及附属的两个离岸开发中心，说“租赁”更好有屁股决定脑袋的嫌疑，所以澄清一下，这么说并非出于推销服务的目的，实在是因为成立离岸开发中心比想象中要困难。&lt;/p&gt;

&lt;p&gt;将软件开发工作转移到海外，并不意味着一定要创建自己的开发中心。一般来说，在海外寻求四五十人规模的开发团队，务实的做法是花一二年时间去调研，外包然后维护，只需要按照流程不出纰漏就好了。但是对于那些要从头创建离岸团队的人来说，特别需要注意：这是在创建一个跨国公司，必然要碰到与之相关的法律，税收，基础设施等各种问题。&lt;/p&gt;

&lt;p&gt;多数情况下，针对不同规模的企业，合适的外包伙伴意味着更少的风险、更高的效率和质量，也可以节省时间和配套设施。这可以理解为另一种形式的“云”，为什么要单独建立自己的电塔呢？为什么为了开汽车而去发掘石油呢？用现有的设施就好了！接下来我会分别说明外包开发团队相较于自己创建团队的几项优势。&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;投资&lt;/h3&gt;

&lt;p&gt;使用海外开发测试人员以及削减成本时，业内有“garbage in, garbage out”的说法。我们向其他大陆的开发中心投入资源（“垃圾”），结果吃惊地发现出来的并不是定制化的产品。或者我们雇佣了当地的优秀开发人员，沾沾自喜之余，却发现六个月后，他通过外国人工作签证离职去了微软。&lt;/p&gt;

&lt;p&gt;在外包开发中，作为客户和企业我都有切身的体验。有一些客户因为商务联系、现有基础设施以及独特的文化背景，建立自己的开发中心相对容易。但是这并不典型，实际情况是：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;许多企业没有很强的海外联系；&lt;/li&gt;
  &lt;li&gt;许多企业无力在海外创建品牌，基础设施以及进行人力资源管理，尤其是那些小公司或创业公司；&lt;/li&gt;
  &lt;li&gt;许多企业试图减少管理相关的工作，将精力集中在代码质量、app、产品和性能上；&lt;/li&gt;
  &lt;li&gt;多数企业运营海外设施时会付出额外的管理费用，而且维护这些设施复杂、昂贵、消耗时间；&lt;/li&gt;
  &lt;li&gt;多数企业想避免复杂、风险和节省时间，但是如果创建自己的开发中心的话，这些是无法避免的。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;创建自己的海外开发中心需要格外关注以上提及的五个方面。解决这些问题困难、琐碎并且花费不菲。我感同身受，因为这就是我的日常工作：提供人力给创业公司和中小企业，帮助他们解决宽带、人力、质量之类的问题。&lt;/p&gt;

&lt;p&gt;我有两个离岸开发中心，并成立了公司去管理它们，员工们（超过130人）通过不同方式当天向我汇报。我们是个完整的公司，有专业的团队，业务扩展到了圣迭戈、阿曼和开罗。&lt;/p&gt;

&lt;p&gt;客户可能在技能和人力上存在不足，我们将自己的团队集成进去，提升他们的能力。需要指出的是，我们并不是二流的团队，或者处于配合地位。我们是一流的，员工的技能和产出达到甚至超出客户的最好水平。&lt;/p&gt;

&lt;p&gt;后面我会详细的解释如何吸引和留住这些高水平的员工（其实并不容易）。&lt;/p&gt;

&lt;p&gt;但是我更想强调的是，客户应该利用海外人才的优势而不用承担背后的负担。除非他们本身是这方面的专家，在海外拥有公司，不然创建开发中心的劣势是全方位的。通过与我们的合作，客户可以减少许多麻烦。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;基础设施&lt;/h3&gt;

&lt;p&gt;上个月，我们位于开罗的办公罗收到一笔物业账单，250000美元。显然，物业公司认为我们钱没有给够。谈判过程开始后，出现了律师、文件、政治在内的各种问题。我是怎么解决的呢？跟创建海外开发中心碰到的其他问题一样，委托给了一个顶级的人力资源和法律团队，该团队熟谙竞争对手、规则以及业务。整个过程对我们而言很痛苦，却是开展业务不得不考虑的因素。客户感觉不到这些，他们接触的是我们的人力、高质量的代码、优秀的团队协作以及靠谱的承诺。若是硅谷的创业公司，突然遇到这类问题，可能就认栽了。&lt;/p&gt;

&lt;p&gt;还有个例子。我的朋友，开了很多公司，有一家在墨西哥，曾经碰到了很有意思的问题。在边境南端，他的公司因为涉嫌故意不向“住户”提供足够的停车位而被开出120万美元的罚单。但问题的关键是，该项业务是处理50英亩的墓地，墓地也需要“停车位”。这是要丧尸出笼么？最终我的朋友通过当地的合作伙伴将罚款降低4000美元（不得不承认这很聪明）。这类问题除了带来潜在的风险外，也很容易分散注意力，以及可能的工期延误。&lt;/p&gt;

&lt;p&gt;总体来说，国际规则、承诺、税法以及商业法，往轻了说是非常复杂，往重了说关系业务的生存。&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;品牌&lt;/h3&gt;

&lt;p&gt;（在建立外包团队时）不能指望随便走进当地的酒吧，就能找到合适的优秀工程师。首先，你的品牌得根植于当地的环境和文化，取得潜在员工的信任。当然，如果你自己熟悉或者来自当地，这个过程会简单些。然而，大部分人都不具备这个条件，即便具备了（比方说我），仍然有很长的路要走。建立品牌花费巨大，不仅包括广告和时间成本，还有雇佣不到合适员工的机会成本。&lt;/p&gt;

&lt;p&gt;我的第一个外包开发中心设立于约旦安曼，我在当地有深厚的人脉，仍然很难招聘和留住合适的员工。&lt;/p&gt;

&lt;p&gt;我的第二个开发中心设立于埃及开罗，开罗和安曼差不多隔了圣迭戈和旧金山的距离。虽然我自己来自并且活跃于这个地区，在成立开发中心亮出招牌时，仍然没有顶级的工程师应聘，一个也没有，只有一些差强人意的候选人。你可能会问为什么？其实在一些欠发达的经济体，稳定的工作机会非常有限，有家室拖累的开发人员很少愿意跳槽，除非确定新的工作机会稳定、有合理的经济回报以及上升预期。发展中国家的雇员们见惯了“明星”企业带着资金和愿景过来，然后又开始打退堂鼓的现象，如此这般，他们也变得精明和谨慎起来。，我们需要时间和资源，来建立能够吸引顶级工程师的招聘品牌，从而满足不同层次客户的需求。&lt;/p&gt;

&lt;p&gt;建立招聘品牌非常重要，但是既不容易也不便宜。大多数情况下，最开始你都不知道目标国家的位置和地理，也没有时间和人手去布置展位或者去大会演讲，只好干等一到两年去获取人力市场的信任。&lt;/p&gt;

&lt;p&gt;花费不仅仅是在市场推广方面，也包括基础设施的投入。举个例子，在开罗创建开发中心的时候，我估计一层楼就可以装下所有员工，但是我仍然租用了整个四层办公楼。我这么做只不过是为了向过来面试的候选人展示留在当地的决心，以及公司未来的扩展规模。（按照我的经验和务实的估计，即便在像班加罗尔这样的地方开设外包研发中心，花一年时间去招聘，最终只能招聘到四五人）。&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;吸引和留住人才&lt;/h3&gt;

&lt;p&gt;海外开发团队成功的关键是能够吸引和留住人才。理解当地的文化，尊重当地团队，用同样标准去运营海外团队，以及为工程师提供激励。&lt;/p&gt;

&lt;p&gt;针对最后一项工程师激励。提升产品质量，需要多样化的开发测试团队。有人负责解决棘手的问题，有人负责重构和解决错误，有人负责选用合适的协议和文档规范，诸如此类的。与之对应，有人想要物质奖励，有人想要丰厚的年终奖金，额外一周的假期，或者商务度假性质的旅行等等。你得明白，没有一揽子的解决方案，不能依靠“棒棒糖”来打造伟大的团队。但是如果将团队管理委托给第三方，并且合作方靠谱的话，就可以节省很多精力，何乐而不为呢？&lt;/p&gt;

&lt;p&gt;作为个体和团队成员，员工需要关心和呵护。这意味着，运营海外开发团队时，也需要有配套的人力资源管理、福利、财务、法律、设施。在硅谷，创业公司或者SMB中流行将支持性的工作委托给专业公司或者直接外包，那么在使用海外开发中心时就更没有必要亲自创建运营了。&lt;/p&gt;

&lt;h3 id=&quot;section-4&quot;&gt;机构，外包，第三方&lt;/h3&gt;

&lt;p&gt;并非所有的企业或者合作伙伴使用同样的方式管理员工、团队以及客户关系。多数企业会指定项目经理。我们提供的开发团队，会完全集成到客户的团队，具体的工作方式可以参见&lt;a href=&quot;http://www.integrant.com/team/tech2tech-structure/&quot;&gt;另一篇文章&lt;/a&gt;。&lt;/p&gt;

&lt;h3 id=&quot;section-5&quot;&gt;另一种选择&lt;/h3&gt;

&lt;p&gt;没有必要从头创建海外开发中心，最好避免这种情况。然而，选择合适的海外开发合作伙伴也很重要。 不谦虚地讲，我自己的公司就不错。&lt;/p&gt;

&lt;p&gt;举个例子，有个老客户，曾经是某大型电子商务公司技术部门负责人，他一直有个不错的想法，并为此离了职去创业，工程相关的工作包括最新的app和插件。他第一时间找到我们，相信我们能够帮他组建团队、实现他的想法，虽然这次已不是原来电商公司的团队。&lt;/p&gt;

&lt;p&gt;我们带他飞到埃及，参观我们的开发中心，面见团队成员。在那里他待了两个星期，之后除了发邮件感谢我们的款待外，还建议我们为他组建一个团队。他亲手挑选了那些自我驱动、勤奋、有想法的团队成员，接下来就不用再为亲手创建和维护海外开发中心而头痛。&lt;/p&gt;

&lt;h3 id=&quot;section-6&quot;&gt;不可承受之失败&lt;/h3&gt;

&lt;p&gt;百分之九十的创业公司会失败，创业者必须集中精力让自己的产品与众不同并且不犯错误。对大多数创业公司而言，从头创建海外开发中心是作死的行为。到时候，你一定会被团队选择、文化差异、沟通、妥协、规则搞得喘不过气来，这些本来是可以避免的。&lt;/p&gt;

&lt;p&gt;就我自己而言，宁愿选择一家信得过的公司外包。这也是我们公司努力的方向。&lt;/p&gt;

&lt;h3 id=&quot;section-7&quot;&gt;关于作者&lt;/h3&gt;

&lt;p&gt;Yousef Awad毕业于加州大学圣迭戈分校，获信息系统科学学士学位，在可定制软件开发行业浸淫20多年，拥有编程、数据库管理和项目管理等领域丰富的经验。Yousef 1997年加入Integran公司，Integrant专注于定制化的软件开发，为客户提供外包团队、IT项目管理服务等。Integrant在阿曼、约旦和埃及开罗拥有开发中心，雇佣了全职员工130名。工作之外，Yousef投入了大量的精力向青少年普及编程知识，让他们获得来自工业界的编程指导。&lt;/p&gt;
</description>
        <pubDate>Tue, 21 Jun 2016 00:00:00 +0800</pubDate>
        <link>http://zhenghua.info/%E8%A1%8C%E4%B8%9A/2016/06/21/Build_your_own_offshore_develop_team.html</link>
        <guid isPermaLink="true">http://zhenghua.info/%E8%A1%8C%E4%B8%9A/2016/06/21/Build_your_own_offshore_develop_team.html</guid>
        
        <category>经营</category>
        
        
        <category>行业</category>
        
      </item>
    
      <item>
        <title>Java 9发布在即, Oracle着手清理Unsafe类</title>
        <description>&lt;p&gt;( &lt;a href=&quot;http://www.infoq.com/cn/news/2016/05/29&quot;&gt;原文&lt;/a&gt;和英文原文&lt;a href=&quot;https://www.infoq.com/news/2016/02/29&quot;&gt;Oracle’s OpenJDK Cleanup of “Unsafe” Implementation&lt;/a&gt;发布于infoq.)&lt;/p&gt;

&lt;p&gt;java 9正式版预计在2017年2季度发布，目前大部分JEP已经基本成型。其中，最关键特性或许是&lt;a href=&quot;http://openjdk.java.net/jeps/261&quot;&gt;JEP 261&lt;/a&gt;, 该JEP实现了java平台的模块系统, 具体说明可以参见&lt;a href=&quot;http://openjdk.java.net/projects/jigsaw/spec/&quot;&gt;JSR376&lt;/a&gt;。 模块系统依赖于&lt;a href=&quot;http://openjdk.java.net/jeps/260&quot;&gt;JEP260&lt;/a&gt;（封装了大部分内部API），导致的结果是&lt;a href=&quot;http://openjdk.java.net/jeps/193&quot;&gt;JEP193&lt;/a&gt;定义的多个句柄会暴露sun.misc.Unsafe类的功能。此前Info&lt;a href=&quot;http://www.infoq.com/news/2015/07/oracle-plan-remove-unsafe&quot;&gt;报道&lt;/a&gt;过致力于解决sun.misc.Unsafe句柄问题的团队，可能的解决方案细节亦可参见&lt;a href=&quot;http://www.infoq.com/articles/A-Post-Apocalyptic-sun.misc.Unsafe-World&quot;&gt;另一篇报道&lt;/a&gt;。 &lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://bugs.openjdk.java.net/browse/JDK-8149159&quot;&gt;Bug 8149159&lt;/a&gt;最近被提交到JDK Bug管理系统, 建议优化和清理Unsafe类, 包括将参数检查从本地代码移入Java（简化JIT）、 sun.misc.Unsafe类和jdk.internal.misc.Unsafe类的统一、 以及本地代码的整体清理。&lt;/p&gt;

&lt;p&gt;2月18日，Oracle工程师Mikael Vidstedt向OpenJDK开发者社区提交了两个补丁（分别针对OpenJDK和OpenJDK HotSpot VM）  &lt;/p&gt;

&lt;p&gt;关于这两个补丁，Vidstedt总结道：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;避免代码重复，sun.misc.Unsafe将全部实现委托给jdk.internal.misc.Unsafe，这意味着java虚拟机(特别是unsafe.cpp）不再需要关心s.m.Unsafe的实现。 &lt;/li&gt;
  &lt;li&gt;s.m.Unsafe的委托方法通常会被内联，但是为了避免性能下降的风险，仍然添加了@ForceInline注解 &lt;/li&gt;
  &lt;li&gt;更新文档，指明用户应该确保Unsafe类的参数正确 &lt;/li&gt;
  &lt;li&gt;参数检查从Unsage.cpp移入java，简化本地代码以及允许JIT进一步优化&lt;/li&gt;
  &lt;li&gt;放松了特定参数的检查，比方说最近引入的U.copySwapMemory没有检查空指针。具体原因可以参考j.i.m.U.checkPointer的文档。除了U.copySwapMemory，现在Unsafe类方法也都没有对参数执行NULL检查 &lt;/li&gt;
  &lt;li&gt;在U.copySwapMemory类的基础上，对j.i.m.U.copyMemory增加了一个测试案例。请随时提醒我合并过来（本该如此）  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在Vidstedt看来，Usage类的清理算是“相当激进”了，值得注意的地方有：  &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Unsafe_方法以及unsafe.cpp中的其他本地方法被申明为静态方法  &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;新增unsafe.hpp代码文件，文件中移入VM其他组件的一些方法。移除部分“extern”函数声明（不要过度使用extern）  &lt;/li&gt;
  &lt;li&gt;对于不怎么用到的UNSAFE_LEAF，移除警告性质的注释（没有必要，只是个VM_LEAF） &lt;/li&gt;
  &lt;li&gt;一些简单的leaf方法使用UNSAFE_LEAF  &lt;/li&gt;
  &lt;li&gt;UNSAFE_ENTRY/UNSAFE_END代码块新增大括号，帮助自动缩进&lt;/li&gt;
  &lt;li&gt;移除未使用的Unsafe_&amp;lt;…&amp;gt;##140形式的函数和宏 &lt;/li&gt;
  &lt;li&gt;更新宏参数，与unsafe.cpp的宏定义保持一致&lt;/li&gt;
  &lt;li&gt;更换带断言的参数检查，正如前面提及，这些检查移入了j.i.m.Unsafe，移除所有s.m.Unsafe相关的代码&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;查看英文原文：&lt;a href=&quot;https://www.infoq.com/news/2016/02/29&quot;&gt;Oracle’s OpenJDK Cleanup of “Unsafe” Implementation&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 07 May 2016 00:00:00 +0800</pubDate>
        <link>http://zhenghua.info/%E8%A1%8C%E4%B8%9A/2016/05/07/oracle_openjdk_cleanup_of_unsafe_class.html</link>
        <guid isPermaLink="true">http://zhenghua.info/%E8%A1%8C%E4%B8%9A/2016/05/07/oracle_openjdk_cleanup_of_unsafe_class.html</guid>
        
        <category>java</category>
        
        
        <category>行业</category>
        
      </item>
    
      <item>
        <title>Java程序员修炼之道－性能调优</title>
        <description>&lt;p&gt;性能评估的几个指标:等待时间(latency), 吞吐率(throughput), 利用率(utilization)， 效率(efficiency), 容量(capacity), 扩展性(scalability), 退化(degradation)，这里的退化指的是在不增加资源的情况下，增加工作单元或客户端，一般等待时间或吞吐量都会发生变化。&lt;/p&gt;

&lt;p&gt;在优化之前需要考虑的几个问题：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;你正在测量的代码有哪些可观测的环节&lt;/li&gt;
  &lt;li&gt;如何测量那些可观测环节&lt;/li&gt;
  &lt;li&gt;这些可观测环节的目标是什么&lt;/li&gt;
  &lt;li&gt;你怎么判断性能调优是否做好了&lt;/li&gt;
  &lt;li&gt;性能调优可接受的最大支出是多少（投入的时间和增加的代码复杂度）&lt;/li&gt;
  &lt;li&gt;在优化过程中，哪些东西是不能舍弃的&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;需要对目标有清醒的认识并理解它们的价值，能达成性能目标的90%通常就够了，可以利用节省下来的时间去做些别的事。将大量精力投入到极少用到的代码路径上，通过优化代码来减少程序运行时长的1%，完全是在浪费时间。&lt;/p&gt;

&lt;p&gt;程序优化的一些原则：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;优化那些重要，而不是最容易的代码&lt;/li&gt;
  &lt;li&gt;首先优化那些最重要（通常是调用最频繁）的方法&lt;/li&gt;
  &lt;li&gt;在遇到那些唾手可得的优化时，把它办了，但要清楚代码的调用频率&lt;/li&gt;
  &lt;li&gt;如果再也不需要调试日志，就去掉它&lt;/li&gt;
  &lt;li&gt;可能不是代码导致等待时间过长，环境中其他部分也会产生等待时间&lt;/li&gt;
  &lt;li&gt;最后再做一轮测量工作，以评估优化结果&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;性能可能会付出的代价&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;占用开发人员的时间&lt;/li&gt;
  &lt;li&gt;引入额外的技术复杂度&lt;/li&gt;
  &lt;li&gt;为了让主线程运行得更快，可能会引入额外得线程来执行辅助任务，但这些线程可能会再负载较高时对系统整体产生不可预料得影响。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;过早优化是万恶之源&lt;/p&gt;

</description>
        <pubDate>Sat, 20 Feb 2016 00:00:00 +0800</pubDate>
        <link>http://zhenghua.info/%E8%AF%BB%E4%B9%A6/2016/02/20/well_grounded_java_developer.html</link>
        <guid isPermaLink="true">http://zhenghua.info/%E8%AF%BB%E4%B9%A6/2016/02/20/well_grounded_java_developer.html</guid>
        
        <category>Java</category>
        
        
        <category>读书</category>
        
      </item>
    
      <item>
        <title>张文木－印度与印度洋</title>
        <description>&lt;p&gt;&lt;img src=&quot;/images/2016/2016-02-09-india_and_india_sea.jpg&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;一本关于地缘政治的书, 不仅仅讲了印度, 也顺带介绍了印度次大陆和印度洋的利益攸关方, 从古代的马其顿、蒙古到近现代的英国、俄国、美国、中国都有所涉及. 书的内容丰富, 读起来也算有趣, 很多观点有让人耳目一新的感觉.&lt;/p&gt;

&lt;p&gt;比如关于印度的地缘形势. 印度三面环海, 北边抵近喜马拉雅山, 从陆地进入印度需要穿过伊朗高原或者阿富汗山地, 由于中亚和西亚地缘板块已经碎裂, 可以作为缓冲, 所以近代以来印度的安全威胁主要来自海上. 从十六世纪起, 印度洋就成为争夺制海权的战场, 任何强国, 只要掌握住绝对制海权, 又有力量打得起陆战, 就可以控制印度帝国. 1946年后印度获得自由, “如果印度在印度洋上的权利不能由印度自己来维护, 这个自由可以说是一文不值”(潘尼迦语).&lt;/p&gt;

&lt;p&gt;比如关于印度的分裂. 这是英国奉行均势政策的结果, 将斯里兰卡分出, 限制印度南向印度洋发展; 把巴基斯坦从印度北方划分出来, 目的是将印度的力量引向北方. 这样既可以从南北两面限制印度的崛起, 又方便外来势力的介入. 绝对的制海权, 需要海量的陆上资源跟进, 像印度这样得天独厚的地缘优势, 没有外来势力干涉的话, 假以时日, 注定要在印度洋取得主导地位.&lt;/p&gt;

&lt;p&gt;比如关于印度的土地改革. 可以与中国进行对比, 资本的原始积累都是血腥的, 不论是社会主义国家还是资本主义国家都是如此(非作者观点). 由于废除了私有制度, 中国农业对工业的贡献通过特殊的”剪刀差”形式表现出来, 所以中国政府可以在不依赖国际和国内私人资本的条件下拥有充足的资金投资工业和国家基本建设. “印度的独立革命, 使印度在获得了独立的国家主权的同时, 也留下了旧时代庞大的私有产权, 而印度的土改并没有废除私有产权, 所以为大规模工业化留下了昂贵的制度成本.”&lt;/p&gt;

&lt;p&gt;书中也有较多篇幅论述中国的地缘形势, 关于中印战争和中日钓鱼岛之争的部分尤其精彩. &lt;/p&gt;

&lt;p&gt;1962年中印战争爆发前, 是新中国成立后最困难的一年, 国内经历严重的困难(自然灾害或其他原因)造成大量人口非正常死亡; 国际上与苏联关系恶化, 委员长在准备反攻大陆, 印度在西南制造摩擦等. 两面作战是大忌. 但是毛泽东等来了一个很好的机会, 由于赫鲁晓夫的愚蠢, 引发了古巴导弹危机. 在美苏紧张对峙的13天里, 中国军队分东西两线迅速完成了出击到撤回的过程, 之所以主动撤回, 是因为西南不是中国的主要用力方向; 北高南低的地形也使得进攻容易固守难(考虑到后勤补给).&lt;/p&gt;

&lt;p&gt;关于中日钓鱼岛之争. 钓鱼岛问题本质上从属于台湾问题, 钓鱼岛及其附属岛屿在地缘政治上是台湾与日本之间的接榫点, 也是”台独”势力信心的支撑点. 台湾问题对于日本就是核心利益, 有人认为可以通过支持日本正常化和入常来换取日本在台湾问题上的支持, 这无异于与虎谋皮, 与虎谋皮需要携带刀子而不是蛋糕. &lt;/p&gt;

&lt;p&gt;对几个历史人物的评价也很有意思.&lt;/p&gt;

&lt;p&gt;与张伯伦相比, 丘吉尔是个性格鲁莽的人, 以为战胜希特勒就万事大吉了, 不料打赢二战后, 英国乃至整个欧洲都沦为了二流角色. 斯大林和罗斯福合伙瓜分了英国的财产. 在欧洲, 斯大林放弃了希腊, 因为俄国人还没有能力染指地中海, 东欧归苏联, 西欧归美国; 在西亚, 波斯湾的石油归美国; 在远东, 长城以北归苏联, 长城以南归美国. 二次大战后, 苏联和美国的关系, 是超越朋友乃至恋人的关系, 整个雅尔塔体系也是斯大林、罗斯福、马歇尔精心设计的结果. 斯大林和罗斯福是真正智慧、冷酷的人物. &lt;/p&gt;

&lt;p&gt;不局限在这本书, 如果拉长时间轴线, 我们再来看看斯大林、罗斯福、毛泽东、赫鲁晓夫、戈尔巴乔夫、曼德拉、叶利钦以及今天的普京等人, 我们也许会得出和当时当地媒体宣传完全不同的观点. &lt;/p&gt;

&lt;p&gt;后记: 假期无聊, 家里老人可能会对”中南海秘闻”之类的话题感兴趣, 正好补充一点素材.&lt;/p&gt;
</description>
        <pubDate>Tue, 09 Feb 2016 00:00:00 +0800</pubDate>
        <link>http://zhenghua.info/%E8%AF%BB%E4%B9%A6/2016/02/09/india_and_india_sea.html</link>
        <guid isPermaLink="true">http://zhenghua.info/%E8%AF%BB%E4%B9%A6/2016/02/09/india_and_india_sea.html</guid>
        
        <category>印度</category>
        
        
        <category>读书</category>
        
      </item>
    
      <item>
        <title>卡尔.萨根的上帝</title>
        <description>&lt;p&gt;&lt;img src=&quot;/images/2015/2015-12-27-kars&#39;s_god.jpg&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;文章的开头分享一个很有意思的观点(来自caoz)&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;互联网的高速发展, 很容易让人产生一种错觉, 以为信息都是公开透明的. 其实各行各业都有自己的小圈子, 真正有价值的信息往往在圈子内部流通.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;对于商业圈来说, 这没什么问题, 商业行为的套利基础在于信息的不对称. 但是对于科技、法律等需要公共经费支持或者受公众舆论影响的行业, 局限在自己的小圈子里并不是一个好的选择. 很多在专业领域取得成就的学者, 安于书房或实验室, 没有发出声音, 声音最大的反而是一些半吊子的读书人, 结果造成外行的隔阂和误解.&lt;/p&gt;

&lt;p&gt;卡尔.萨根是个例外, 不但在自己专业领域内(天文学)做出了卓绝的贡献, 生前也一直致力于科学普及, 他经常在幼儿园、移民庆典、黑人社群发表演讲, 也参加电视节目, 在大学举办讲座等等. 为什么这么做呢? 他的道理是我们的社会某种程度上是建立在科学和现代技术的基础上, 如果人类中只有极少数人对其原理有一点肤浅的理解, 我们又怎么可能成为成熟社会中有责任感的公民, 并在面对挑战时做出理性的决策呢?&lt;/p&gt;

&lt;p&gt;向公众普及科学并不是容易的事情. 由学校得到的经验, 对于特定的知识点, 看懂和会做题并不是真的懂了, 能够讲出來并让别人也听明白, 才算作真正的理解. 布道者首先需要具备扎实的专业基础, 除此之外, 也需要考虑接受者的能力和品味, 从微信公众号的传播来看, 很多流行的文章并没有体现出多少高级智力活动的特征. 让公众明白并接受自己的观点需要非凡的耐心和同理心.&lt;/p&gt;

&lt;p&gt;《卡尔.萨根的上帝》是卡尔.萨根一系列努力中一环, 书的内容来自作者在苏格兰吉福德讲座的讲稿. 在讲座中, 作者发表了自己对科学和宗教之间边缘区域的观点. 所谓的边缘区域, 指的是宗教教条中由现代科学证伪或者无法通过科学思维证实的部分.&lt;/p&gt;

&lt;p&gt;比如宗教中关于人的起源, 认定人类是上帝按照自己的形象制造出来的. 如果把目光投向星空, 就很容易指出这个观点的薄弱之处. 太阳系中地球之外的其他行星并没有空气, 上帝跟我们一样也有鼻子需要呼吸, 但是他为什么非要把自己局限在地球上呢?&lt;/p&gt;

&lt;p&gt;比如人类是道德的动物, 这一点经常被用来作为上帝存在的证明. 但是深究起来这个观点同样很可疑, 很多动物拥有行为准则, 利他主义、乱伦禁忌、对幼崽的慈爱等, 这些本能的出现与其说来源于上帝的设计, 不如说是自然选择的结果, 因为拥有这些本能的群体更容易让自己的基因延续下去.&lt;/p&gt;

&lt;p&gt;又比如人们遇到无法解释的自然现象或者超出理解范围的事物时往往会归因为神迹. 对此, 卡尔.萨根也作了很好的说明.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;在各个时代都有很多伪造的神迹、预言和超自然事件, 他们要么被相反的证据揭穿, 要么因其本身的荒谬站不住脚, 但是这足以证明人类有一种追求不寻常和非凡的强烈倾向, 所以我们对此类传言应当给予合理的怀疑. 明智的读者可能会说, 奇怪的是这类奇妙的事件在我们的时代从来没有发生过, 但是所有的时代都有谎言毫不奇怪.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;…在买二手车这样的小事上人们尚且会这么做, 在神学、伦理学、道德、世界的本源和人类的本性这些问题上, 难道我们不应该坚持至少同等的怀疑和审视？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;书中涉及到的主题还包含了天文常识、生命起源、外星智慧、以及宗教体验等等, 全书行文流畅、幽默, 阅读起来就像跟充满智慧的长者对话一样.&lt;/p&gt;

&lt;p&gt;刚开始我不太明白, 作者为什么费这么大劲写一整本书来说明上帝是否存在, 至少在小学阶段我就已经懂得, 所有的宗教偶像都是虚幻的. 后来我开始意识到宗教在西方社会占据着特殊地位, 有着巨大的影响力. 但是很少有宗教能够克制自己不对天文学、物理学和生物学发表意见, 在这些方面, 宗教得到的结论和得到结论的方式往往和科学相冲突 , 科学相信的是证据, 而不是盲从和信仰.&lt;/p&gt;

&lt;p&gt;最后推荐一下作者其他著作《魔鬼出没的世界》, 《暗淡蓝点》. &lt;/p&gt;

</description>
        <pubDate>Sun, 27 Dec 2015 00:00:00 +0800</pubDate>
        <link>http://zhenghua.info/%E8%AF%BB%E4%B9%A6/2015/12/27/Karl%E2%80%98s%20god.html</link>
        <guid isPermaLink="true">http://zhenghua.info/%E8%AF%BB%E4%B9%A6/2015/12/27/Karl%E2%80%98s%20god.html</guid>
        
        <category>卡尔.萨根</category>
        
        
        <category>读书</category>
        
      </item>
    
      <item>
        <title>田余庆－东晋门阀政治</title>
        <description>&lt;p&gt;囿于这几年的阅读体验，我习惯性地将历史类著作分成两大类, 一类讲述历史发生了什么, 列举历史事件的细节, 不掺杂价值判断, 这类书可读性不大, 若对具体的历史细节感兴 趣, 可以参考维基百科, 以链接形式组织的文档查阅起来异常方便, 也不容易混淆。另一类讲述历史事件为什么会发生, 侧重介绍历史事件背后的政治、经济、思想文化, 夹杂了较多论证推理和作者的个人观点, 虽说是一家之言,往往能带来不同的视角和启发。&lt;/p&gt;

&lt;p&gt;田余庆先生的这本《东晋门阀政治》, 详细介绍了东晋一朝政治制度的形成和演化过程,属于我前面提到的第二类书。得益于作者思考缜密, 论证有力, 此书面世以来好评如潮,连我这种非专业的读者也会爱不释手。关于书的具体内容,我这里不再赘述, 只谈谈印象较为深刻的三个方面。&lt;/p&gt;

&lt;p&gt;首先是东晋的门阀政治并不等同与分封制度下的贵族政治。世家家族地位的取得, 主要是依靠家族成员获取的政治地位－在朝中掌握中枢或者外任封疆大吏,这些并不 是世袭的。田先生说东晋的门阀政治是传统皇权政治的变态(与常态相对), 是因为某种程度上门阀政治从属于传统的皇权政治, 门阀本身也是整个中央集权体系的 一部分。家族的过往头衔和积累固然重要, 但不是一成不变的。琅琊王氏、颍川庾氏、陈郡谢氏, 在渡江之前不过是二流的士族, 由于渡江后在东晋建国过程中发挥了关键作用或者由于家学传承获得了统治者的青睐, 很快便跻身一流, 而后家族的衰落也跟人才的凋零息息相关。&lt;/p&gt;

&lt;p&gt;其次, 稳定的国家是平衡的政治系 统。这个说法来自于福山在清华演讲时提出的观点, “理想的国家是平衡的政治系统”。他的本意是政府应该拥有强大的行政能力, 同时又要受到监督和制约。东晋 终其一朝, 未能在政治、文化、军事上取得建树, 但是政治上的平衡却无时不在。第一个层面是皇权和士族权力的平衡, 传统皇权政治里, 皇帝掌握至高的权力, 以三公九卿为代表的内阁代为行使皇帝的意志。东晋司马氏的权力基础并不稳固, 皇帝要想巩固自己的权威, 便要依靠低级士族和平民, 但是在东晋的政治语境里, 这些人连获取政治资源的机会都没有。东晋的正统人才选拔制度为九品中正制, 士人获得升迁依赖于中正评定的品级, 品级的高低又取决于家族的实力和候选人的清誉 （例如在玄学上的造诣）, 通过这一点, 门阀成功地将低级士族和平民隔绝在体制外。第二个层面是士族之间的平衡, 庾氏掌握荆州和梁州时, 琅琊王氏便要争夺江 州；桓氏势大时, 谢氏转而专心经营豫州；王敦和桓玄起兵时, 其他士族便要联合起来共同维护司马氏的统治。对于士族来讲, 一条不成文的规则是, 皇权扩张时,  要及时制止皇帝的野心；皇权式微时, 便要维护皇帝的权威, 稳定的门阀政治最符合门阀整体的利益。&lt;/p&gt;

&lt;p&gt;最后是意识形态由儒入玄但儒学犹得不绝。魏 晋以来, 玄学逐渐取代了儒学的统治地位, 以竹林七贤为代表的玄学名士备受推崇, 这会让人产生一种错觉, 以为儒学已然衰微难以维系。然而儒学自有其社会效 用, 儒家基本思想或者被包涵于玄学之中, 或者尚独立存在于玄学之外, 继续起着或多或少的作用。“遵儒者之教,履道家之言”, 是多数当政居位的玄学名士立身行事的共同倾向。一些上流社会的玄学名士如刘惔、王濛辈,但求放达, 不谙世务, 虽有清誉, 但往往沦为真正掌权者的笑柄。清谈名士是门阀政治的点缀, 世家大 族真正的基础和底蕴, 经济上体现在田产的多寡；政治上体现在官场要职和军队的掌控；组织上体现在对家族的认同, 这些跟儒学的修齐治平理念是切合的。&lt;/p&gt;

</description>
        <pubDate>Mon, 30 Nov 2015 00:00:00 +0800</pubDate>
        <link>http://zhenghua.info/%E8%AF%BB%E4%B9%A6/2015/11/30/politics_of_dongjin_dynasty.html</link>
        <guid isPermaLink="true">http://zhenghua.info/%E8%AF%BB%E4%B9%A6/2015/11/30/politics_of_dongjin_dynasty.html</guid>
        
        <category>history</category>
        
        
        <category>读书</category>
        
      </item>
    
      <item>
        <title>深入理解Java虚拟机－垃圾收集与内存分配</title>
        <description>&lt;h3 id=&quot;section&quot;&gt;引用计数算法&lt;/h3&gt;

&lt;p&gt;给对象中添加一个引用计数器，每当有一个地方引用它时，计数器值就加1；当引用失效时，计数器值就减1；任何时刻计数器为0的对象就是不可能再被使用的。&lt;/p&gt;

&lt;p&gt;引用技术算法的实现简单，判定效率也很高，大部分情况下它都是一个不错的算法。但是主流的Java虚拟机里面并没有选用引用计数算法来管理内存，其中最主要的原因是它很难解决对象之间相互循环引用的问题。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;可达性分析算法&lt;/h3&gt;

&lt;p&gt;通过一系列成为“GC Roots“的对象作为起始点，从这些节点开始向下搜索，搜索所走过的路径称为引用链(Reference Chain),当一个对象到GC Roots没有任何引用链相连(用图论的话来说，就是从GC Roots到这个对象不可达)时，则证明此对象是不可用的。&lt;/p&gt;

&lt;p&gt;在Java语言中，可作为GC Roots的对象包括下面几种：
* 虚拟机栈(栈帧中的本地变量表)中引用的对象；
* 方法区中类静态属性引用的对象；
* 方法区中常量引用的对象；
* 本地方法栈中JNI(即一般说的Native方法)引用的对象。&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;引用&lt;/h3&gt;

&lt;p&gt;对于一些“食之无味，弃之可惜”的对象，当内存空间还足够时，则能保留在内存之中；如果内存空间在进行垃圾收集后还是非常紧张，则可以抛弃这些对象。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;强引用就是指在程序代码之中普遍存在的，类似“Object obj＝new Object()”这类的引用，只要强引用还在，垃圾收集器永远不会回收掉被引用的对象。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;软引用是用来描述一些还有用但并非必需的对象。对于软引用关联着的对象，在系统将要发生内存溢出异常之前，将会把这些对象列进回收范围之中进行第二次回收。如果这次回收还没有足够的内存，才会抛出内存溢出异常。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;弱引用也称为幽灵引用或者幻影引用，它是最弱的一种引用关系。一个对象是否有虚引用存在，完全不会对起生存时间构成影响，也无法通过虚引用来取得一个对象实例。为一个对象设置虚引用关联的唯一目的就是能在这个对象被收集器回收时收到一个系统通知。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-3&quot;&gt;回收方法区&lt;/h3&gt;

&lt;p&gt;判断一个常量是否是“废弃常量”比较简单，而要判定一个类是否是“无用的类”的条件则相对苛刻许多，类需要同时满足下面三个条件才能算是“无用的类”：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;该类所有的实例都已经被回收，也就是Java堆中不存在该类的任何实例；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;加载该类的ClassLoader已经被回收;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;该类对应的java.lang.Class对象没有在任何对方被引用，无法在任何地方通过反射访问该类的方法。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-4&quot;&gt;垃圾收集算法之标记－清除算法&lt;/h3&gt;

&lt;p&gt;首先标记出所有需要回收的对象，在标记完成后统一回收所有被标记的对象。不足之处在于：一是效率问题，标记和清除两个过程的效率都不高；二是空间问题，标记清除后会产生大量不连续的内存碎片，空间碎片太多可能会导致以后在程序运行过程中需要分配较大对象时，无法找到足够的连续内存而不得不提前触发另一次垃圾收集动作。&lt;/p&gt;

&lt;h3 id=&quot;section-5&quot;&gt;垃圾收集算法之复制算法&lt;/h3&gt;

&lt;p&gt;将可用内存按容量划分为大小相等的两块，每次只使用其中的一块。当这一块内存用完了，就将还存活着的对象复制到另外一块上面，然后再把已使用过的内存空间一次清理掉。代价是将内存缩小为原来的一半。&lt;/p&gt;

&lt;p&gt;也可以将内存划分为一块较大的Eden空间和两块较少的Survivor空间，每次使用Eden和其中一块Survivor空间。当回收时，将Eden和Survivor中还存活着的对象一次性地复制到另外一块Survivor空间上，最后清理掉Eden和刚才用过的Survivor空间。&lt;/p&gt;

&lt;h3 id=&quot;section-6&quot;&gt;垃圾收集算法之标记－整理算法&lt;/h3&gt;

&lt;p&gt;标记过程仍然与“标记－清除”算法一样，但后续步骤不是直接对可回收对象进行清理，而是让所有存活的对象都向一端移动，然后直接清理掉端边界以外的内存。&lt;/p&gt;

&lt;h3 id=&quot;section-7&quot;&gt;垃圾收集算法之分代收集算法&lt;/h3&gt;

&lt;p&gt;根据对象存活周期的不同将内存划分为几块。一般是把Java堆分为新生代和老年代，这样就可以根据各个年代的特点采用最适当的收集算法。在新生代中，每次垃圾收集时都发现有大批对象死去，只有少量存活，那就选用复制算法，只需要付出少量存活对象的复制成本就可以完成收集。而老年代中因为对象存活率高、没有额外空间对它进行分配担保，就必需使用“标记－清理”或者“标记－整理”算法来进行回收。&lt;/p&gt;

&lt;h2 id=&quot;section-8&quot;&gt;内存分配与回收策略&lt;/h2&gt;

&lt;p&gt;对象的分配，往大方向讲，就是在堆上分配(但也可能经过JIT编译后被拆散为标量类型并间接地在栈上分配），对象主要分配在Eden区上，如果启动了本地线程分配缓冲，将按线程优先在TLAB上分配。少数情况下也可能会直接分配在老年代中，分配的规则并不是百分之百固定的，其细节取决于当前使用的是哪一种垃圾收集器组合，还有虚拟机与内存相关的参数的设置。&lt;/p&gt;

&lt;p&gt;大对象（比如很长的字符串或者数组）对虚拟机的内存分配来说是一个坏消息，经常出现大对象容易导致内存还有不少空间时就提前触发垃圾收集以获取足够的连续空间来“安置”他们。&lt;/p&gt;

&lt;h3 id=&quot;section-9&quot;&gt;动态对象年龄判定&lt;/h3&gt;

&lt;p&gt;为了能更好地适应不同程序地内存状况，虚拟机并不是永远地要求对象地年龄必须达到了MaxTenuringThreshold才能晋升老年代，如果在Survivor空间中相同年龄所有对象大小地总和大于Survivor空间地一半，年龄大于或等于该年龄地对象就可以直接进入老年代，无须等到MaxTenuringThreshold中要求地年龄。&lt;/p&gt;
</description>
        <pubDate>Thu, 06 Aug 2015 00:00:00 +0800</pubDate>
        <link>http://zhenghua.info/%E8%AF%BB%E4%B9%A6/2015/08/06/Garbage_collection_and_memory_allocate.html</link>
        <guid isPermaLink="true">http://zhenghua.info/%E8%AF%BB%E4%B9%A6/2015/08/06/Garbage_collection_and_memory_allocate.html</guid>
        
        <category>Java</category>
        
        
        <category>读书</category>
        
      </item>
    
      <item>
        <title>深入理解Java虚拟机－Java内存区域</title>
        <description>&lt;p&gt;程序计数器：Java虚拟机的多线程时通过线程轮流切换并分配处理器执行时间的方式来实现的，在任何一个确定的时刻，一个处理器都只会执行一条线程中的指令。因此，为了线程切换后能恢复到正确的执行位置，每条线程都需要一个独立的程序计数器，各条线程之间计数器互不影响。&lt;/p&gt;

&lt;p&gt;Java虚拟机栈：在Java虚拟机规范中，对这个区域规定了两种异常状况：如果线程请求的栈深度大于虚拟机所允许的深度，将抛出StackOverflowError异常：如果虚拟机栈可以动态扩展，如果扩展时无法申请到足够的内存，就会抛出OutOfMemoryError异常。&lt;/p&gt;

&lt;p&gt;本地方法栈：功能与虚拟机栈类似，虚拟机栈为虚拟机执行Java方法（也就是字节码）服务，而本地方法栈则为虚拟机使用到的Native方法服务。&lt;/p&gt;

&lt;p&gt;Java堆：对于大多数应用来说，Java堆(Java Heap)是Java虚拟机所管理的内存中最大的一块。Java堆是被所有线程共享的一块内存区域，在虚拟机启动的时候创建。此内存区域的唯一目的就是存放对象实例，几乎所有对象实例都在这里分配内存。&lt;/p&gt;

&lt;p&gt;Java堆是垃圾收集器管理的主要区域，因此很多时候也被称为“GC”堆。&lt;/p&gt;

&lt;p&gt;Java堆可以在物理上不连续的内存空间中，只要逻辑上是连续的即可。&lt;/p&gt;

&lt;p&gt;方法区：与Java堆一样，是各个线程共享的内存区域，它用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。&lt;/p&gt;

&lt;p&gt;垃圾收集行为在这个区域是比较少出现的。&lt;/p&gt;

&lt;p&gt;运行时常量池：运行时常量池是方法区的一部分。Class文件中除了有类的版本、字段、方法、接口等描述信息外，还有一项是常量池(Constant Pool Table)，用于存放编译期生成的各种字面量和符号引用，这部分内容将在类加载后进入方法区的运行时常量池中存放。&lt;/p&gt;

&lt;p&gt;Java虚拟机对Class文件每一部分(包括常量池)的格式都有严格的规定，每一个字节用于存储哪种数据都必须符合规范上的要求才会被虚拟机认可、装载和执行。&lt;/p&gt;

&lt;p&gt;直接内存：直接内存(Direct Memory)并不是虚拟机运行时数据区的一部分，也不是Java虚拟机规范中定义的内存区域。但是这部分内存也被频繁地使用，而且也可能导致OutOfMemoryError异常出现。&lt;/p&gt;

&lt;p&gt;在JDK1.4中新加入NIO(New Input/Output)类，引入了一种基于通道(Channel)与缓冲区(Buffer)中的I/O方式，它可以使用Native函数哭直接分配堆外内存，然后通过一个存储在Java堆中的DirectByteBuffer对象作为这块内存的引用进行操作，这样能在一些场景中显著提高性能，因为避免了在Java堆和Native堆中来回复制数据。&lt;/p&gt;

&lt;p&gt;对象的创建(HotSpot虚拟机)：虚拟机遇到一条new指令时，首先将去检查这个指令的参数是否能在常量池中定位到一个类的符号引用，并且检查这个符号引用代表的类是否已被加载、解析和初始化过。如果没有，那必须先执行相应的类加载过程。&lt;/p&gt;

&lt;p&gt;为对象分配空间的任务等同于把一块确定大小的内存从Java堆中划分出来。&lt;/p&gt;

&lt;p&gt;如果Java堆中的内存并不是规整的，已使用的内存和空闲的内存相互交错，虚拟机就必须维护一个列表，记录上那些内存块是可用的，在分配的时候从列表中找到一块足够大的空间划分给对象实例&lt;/p&gt;

&lt;p&gt;对象的内存布局：在HotSpot虚拟机中，对象在内存中存储的布局可以氛围3块区域：对象头(Header)、实例数据(Instance Data)和对齐填充(Padding).&lt;/p&gt;

</description>
        <pubDate>Wed, 05 Aug 2015 00:00:00 +0800</pubDate>
        <link>http://zhenghua.info/%E8%AF%BB%E4%B9%A6/2015/08/05/Java_memory_model.html</link>
        <guid isPermaLink="true">http://zhenghua.info/%E8%AF%BB%E4%B9%A6/2015/08/05/Java_memory_model.html</guid>
        
        <category>Java</category>
        
        
        <category>读书</category>
        
      </item>
    
  </channel>
</rss>
