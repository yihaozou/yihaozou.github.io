<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>邹政华学习笔记</title>
    <description>Read Think Create.</description>
    <link>http://zhenghua.info/</link>
    <atom:link href="http://zhenghua.info/zfeed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 23 May 2016 16:13:44 +0800</pubDate>
    <lastBuildDate>Mon, 23 May 2016 16:13:44 +0800</lastBuildDate>
    <generator>Jekyll v2.5.2</generator>
    
      <item>
        <title>Java 9发布在即, Oracle着手清理Unsafe类</title>
        <description>&lt;p&gt;java 9正式版预计在2017年2季度发布，目前大部分JEP已经基本成型。其中，最关键特性或许是&lt;a href=&quot;http://openjdk.java.net/jeps/261&quot;&gt;JEP 261&lt;/a&gt;, 该JEP实现了java平台的模块系统, 具体说明可以参见&lt;a href=&quot;http://openjdk.java.net/projects/jigsaw/spec/&quot;&gt;JSR376&lt;/a&gt;。 模块系统依赖于&lt;a href=&quot;http://openjdk.java.net/jeps/260&quot;&gt;JEP260&lt;/a&gt;（封装了大部分内部API），导致的结果是&lt;a href=&quot;http://openjdk.java.net/jeps/193&quot;&gt;JEP193&lt;/a&gt;定义的多个句柄会暴露sun.misc.Unsafe类的功能。此前Info&lt;a href=&quot;http://www.infoq.com/news/2015/07/oracle-plan-remove-unsafe&quot;&gt;报道&lt;/a&gt;过致力于解决sun.misc.Unsafe句柄问题的团队，可能的解决方案细节亦可参见&lt;a href=&quot;http://www.infoq.com/articles/A-Post-Apocalyptic-sun.misc.Unsafe-World&quot;&gt;另一篇报道&lt;/a&gt;。 &lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://bugs.openjdk.java.net/browse/JDK-8149159&quot;&gt;Bug 8149159&lt;/a&gt;最近被提交到JDK Bug管理系统, 建议优化和清理Unsafe类, 包括将参数检查从本地代码移入Java（简化JIT）、 sun.misc.Unsafe类和jdk.internal.misc.Unsafe类的统一、 以及本地代码的整体清理。&lt;/p&gt;

&lt;p&gt;2月18日，Oracle工程师Mikael Vidstedt向OpenJDK开发者社区提交了两个补丁（分别针对OpenJDK和OpenJDK HotSpot VM）  &lt;/p&gt;

&lt;p&gt;关于这两个补丁，Vidstedt总结道：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;避免代码重复，sun.misc.Unsafe将全部实现委托给jdk.internal.misc.Unsafe，这意味着java虚拟机(特别是unsafe.cpp）不再需要关心s.m.Unsafe的实现。 &lt;/li&gt;
  &lt;li&gt;s.m.Unsafe的委托方法通常会被内联，但是为了避免性能下降的风险，仍然添加了@ForceInline注解 &lt;/li&gt;
  &lt;li&gt;更新文档，指明用户应该确保Unsafe类的参数正确 &lt;/li&gt;
  &lt;li&gt;参数检查从Unsage.cpp移入java，简化本地代码以及允许JIT进一步优化&lt;/li&gt;
  &lt;li&gt;放松了特定参数的检查，比方说最近引入的U.copySwapMemory没有检查空指针。具体原因可以参考j.i.m.U.checkPointer的文档。除了U.copySwapMemory，现在Unsafe类方法也都没有对参数执行NULL检查 &lt;/li&gt;
  &lt;li&gt;在U.copySwapMemory类的基础上，对j.i.m.U.copyMemory增加了一个测试案例。请随时提醒我合并过来（本该如此）  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在Vidstedt看来，Usage类的清理算是“相当激进”了，值得注意的地方有：  &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Unsafe_方法以及unsafe.cpp中的其他本地方法被申明为静态方法  &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;新增unsafe.hpp代码文件，文件中移入VM其他组件的一些方法。移除部分“extern”函数声明（不要过度使用extern）  &lt;/li&gt;
  &lt;li&gt;对于不怎么用到的UNSAFE_LEAF，移除警告性质的注释（没有必要，只是个VM_LEAF） &lt;/li&gt;
  &lt;li&gt;一些简单的leaf方法使用UNSAFE_LEAF  &lt;/li&gt;
  &lt;li&gt;UNSAFE_ENTRY/UNSAFE_END代码块新增大括号，帮助自动缩进&lt;/li&gt;
  &lt;li&gt;移除未使用的Unsafe_&amp;lt;…&amp;gt;##140形式的函数和宏 &lt;/li&gt;
  &lt;li&gt;更新宏参数，与unsafe.cpp的宏定义保持一致&lt;/li&gt;
  &lt;li&gt;更换带断言的参数检查，正如前面提及，这些检查移入了j.i.m.Unsafe，移除所有s.m.Unsafe相关的代码&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 07 May 2016 00:00:00 +0800</pubDate>
        <link>http://zhenghua.info/%E8%A1%8C%E4%B8%9A/2016/05/07/oracle_openjdk_cleanup_of_unsafe_class.html</link>
        <guid isPermaLink="true">http://zhenghua.info/%E8%A1%8C%E4%B8%9A/2016/05/07/oracle_openjdk_cleanup_of_unsafe_class.html</guid>
        
        <category>java</category>
        
        
        <category>行业</category>
        
      </item>
    
      <item>
        <title>Java程序员修炼之道－性能调优</title>
        <description>&lt;p&gt;性能评估的几个指标:等待时间(latency), 吞吐率(throughput), 利用率(utilization)， 效率(efficiency), 容量(capacity), 扩展性(scalability), 退化(degradation)，这里的退化指的是在不增加资源的情况下，增加工作单元或客户端，一般等待时间或吞吐量都会发生变化。&lt;/p&gt;

&lt;p&gt;在优化之前需要考虑的几个问题：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;你正在测量的代码有哪些可观测的环节&lt;/li&gt;
  &lt;li&gt;如何测量那些可观测环节&lt;/li&gt;
  &lt;li&gt;这些可观测环节的目标是什么&lt;/li&gt;
  &lt;li&gt;你怎么判断性能调优是否做好了&lt;/li&gt;
  &lt;li&gt;性能调优可接受的最大支出是多少（投入的时间和增加的代码复杂度）&lt;/li&gt;
  &lt;li&gt;在优化过程中，哪些东西是不能舍弃的&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;需要对目标有清醒的认识并理解它们的价值，能达成性能目标的90%通常就够了，可以利用节省下来的时间去做些别的事。将大量精力投入到极少用到的代码路径上，通过优化代码来减少程序运行时长的1%，完全是在浪费时间。&lt;/p&gt;

&lt;p&gt;程序优化的一些原则：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;优化那些重要，而不是最容易的代码&lt;/li&gt;
  &lt;li&gt;首先优化那些最重要（通常是调用最频繁）的方法&lt;/li&gt;
  &lt;li&gt;在遇到那些唾手可得的优化时，把它办了，但要清楚代码的调用频率&lt;/li&gt;
  &lt;li&gt;如果再也不需要调试日志，就去掉它&lt;/li&gt;
  &lt;li&gt;可能不是代码导致等待时间过长，环境中其他部分也会产生等待时间&lt;/li&gt;
  &lt;li&gt;最后再做一轮测量工作，以评估优化结果&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;性能可能会付出的代价&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;占用开发人员的时间&lt;/li&gt;
  &lt;li&gt;引入额外的技术复杂度&lt;/li&gt;
  &lt;li&gt;为了让主线程运行得更快，可能会引入额外得线程来执行辅助任务，但这些线程可能会再负载较高时对系统整体产生不可预料得影响。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;过早优化是万恶之源&lt;/p&gt;

</description>
        <pubDate>Sat, 20 Feb 2016 00:00:00 +0800</pubDate>
        <link>http://zhenghua.info/%E8%AF%BB%E4%B9%A6/2016/02/20/well_grounded_java_developer.html</link>
        <guid isPermaLink="true">http://zhenghua.info/%E8%AF%BB%E4%B9%A6/2016/02/20/well_grounded_java_developer.html</guid>
        
        <category>Java</category>
        
        
        <category>读书</category>
        
      </item>
    
      <item>
        <title>张文木－印度与印度洋</title>
        <description>&lt;p&gt;&lt;img src=&quot;/images/2016/2016-02-09-india_and_india_sea.jpg&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;一本关于地缘政治的书, 不仅仅讲了印度, 也顺带介绍了印度次大陆和印度洋的利益攸关方, 从古代的马其顿、蒙古到近现代的英国、俄国、美国、中国都有所涉及. 书的内容丰富, 读起来也算有趣, 很多观点有让人耳目一新的感觉.&lt;/p&gt;

&lt;p&gt;比如关于印度的地缘形势. 印度三面环海, 北边抵近喜马拉雅山, 从陆地进入印度需要穿过伊朗高原或者阿富汗山地, 由于中亚和西亚地缘板块已经碎裂, 可以作为缓冲, 所以近代以来印度的安全威胁主要来自海上. 从十六世纪起, 印度洋就成为争夺制海权的战场, 任何强国, 只要掌握住绝对制海权, 又有力量打得起陆战, 就可以控制印度帝国. 1946年后印度获得自由, “如果印度在印度洋上的权利不能由印度自己来维护, 这个自由可以说是一文不值”(潘尼迦语).&lt;/p&gt;

&lt;p&gt;比如关于印度的分裂. 这是英国奉行均势政策的结果, 将斯里兰卡分出, 限制印度南向印度洋发展; 把巴基斯坦从印度北方划分出来, 目的是将印度的力量引向北方. 这样既可以从南北两面限制印度的崛起, 又方便外来势力的介入. 绝对的制海权, 需要海量的陆上资源跟进, 像印度这样得天独厚的地缘优势, 没有外来势力干涉的话, 假以时日, 注定要在印度洋取得主导地位.&lt;/p&gt;

&lt;p&gt;比如关于印度的土地改革. 可以与中国进行对比, 资本的原始积累都是血腥的, 不论是社会主义国家还是资本主义国家都是如此(非作者观点). 由于废除了私有制度, 中国农业对工业的贡献通过特殊的”剪刀差”形式表现出来, 所以中国政府可以在不依赖国际和国内私人资本的条件下拥有充足的资金投资工业和国家基本建设. “印度的独立革命, 使印度在获得了独立的国家主权的同时, 也留下了旧时代庞大的私有产权, 而印度的土改并没有废除私有产权, 所以为大规模工业化留下了昂贵的制度成本.”&lt;/p&gt;

&lt;p&gt;书中也有较多篇幅论述中国的地缘形势, 关于中印战争和中日钓鱼岛之争的部分尤其精彩. &lt;/p&gt;

&lt;p&gt;1962年中印战争爆发前, 是新中国成立后最困难的一年, 国内经历严重的困难(自然灾害或其他原因)造成大量人口非正常死亡; 国际上与苏联关系恶化, 委员长在准备反攻大陆, 印度在西南制造摩擦等. 两面作战是大忌. 但是毛泽东等来了一个很好的机会, 由于赫鲁晓夫的愚蠢, 引发了古巴导弹危机. 在美苏紧张对峙的13天里, 中国军队分东西两线迅速完成了出击到撤回的过程, 之所以主动撤回, 是因为西南不是中国的主要用力方向; 北高南低的地形也使得进攻容易固守难(考虑到后勤补给).&lt;/p&gt;

&lt;p&gt;关于中日钓鱼岛之争. 钓鱼岛问题本质上从属于台湾问题, 钓鱼岛及其附属岛屿在地缘政治上是台湾与日本之间的接榫点, 也是”台独”势力信心的支撑点. 台湾问题对于日本就是核心利益, 有人认为可以通过支持日本正常化和入常来换取日本在台湾问题上的支持, 这无异于与虎谋皮, 与虎谋皮需要携带刀子而不是蛋糕. &lt;/p&gt;

&lt;p&gt;对几个历史人物的评价也很有意思.&lt;/p&gt;

&lt;p&gt;与张伯伦相比, 丘吉尔是个性格鲁莽的人, 以为战胜希特勒就万事大吉了, 不料打赢二战后, 英国乃至整个欧洲都沦为了二流角色. 斯大林和罗斯福合伙瓜分了英国的财产. 在欧洲, 斯大林放弃了希腊, 因为俄国人还没有能力染指地中海, 东欧归苏联, 西欧归美国; 在西亚, 波斯湾的石油归美国; 在远东, 长城以北归苏联, 长城以南归美国. 二次大战后, 苏联和美国的关系, 是超越朋友乃至恋人的关系, 整个雅尔塔体系也是斯大林、罗斯福、马歇尔精心设计的结果. 斯大林和罗斯福是真正智慧、冷酷的人物. &lt;/p&gt;

&lt;p&gt;不局限在这本书, 如果拉长时间轴线, 我们再来看看斯大林、罗斯福、毛泽东、赫鲁晓夫、戈尔巴乔夫、曼德拉、叶利钦以及今天的普京等人, 我们也许会得出和当时当地媒体宣传完全不同的观点. &lt;/p&gt;

&lt;p&gt;后记: 假期无聊, 家里老人可能会对”中南海秘闻”之类的话题感兴趣, 正好补充一点素材.&lt;/p&gt;
</description>
        <pubDate>Tue, 09 Feb 2016 00:00:00 +0800</pubDate>
        <link>http://zhenghua.info/%E8%AF%BB%E4%B9%A6/2016/02/09/india_and_india_sea.html</link>
        <guid isPermaLink="true">http://zhenghua.info/%E8%AF%BB%E4%B9%A6/2016/02/09/india_and_india_sea.html</guid>
        
        <category>印度</category>
        
        
        <category>读书</category>
        
      </item>
    
      <item>
        <title>卡尔.萨根的上帝</title>
        <description>&lt;p&gt;&lt;img src=&quot;/images/2015/2015-12-27-kars&#39;s_god.jpg&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;文章的开头分享一个很有意思的观点(来自caoz)&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;互联网的高速发展, 很容易让人产生一种错觉, 以为信息都是公开透明的. 其实各行各业都有自己的小圈子, 真正有价值的信息往往在圈子内部流通.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;对于商业圈来说, 这没什么问题, 商业行为的套利基础在于信息的不对称. 但是对于科技、法律等需要公共经费支持或者受公众舆论影响的行业, 局限在自己的小圈子里并不是一个好的选择. 很多在专业领域取得成就的学者, 安于书房或实验室, 没有发出声音, 声音最大的反而是一些半吊子的读书人, 结果造成外行的隔阂和误解.&lt;/p&gt;

&lt;p&gt;卡尔.萨根是个例外, 不但在自己专业领域内(天文学)做出了卓绝的贡献, 生前也一直致力于科学普及, 他经常在幼儿园、移民庆典、黑人社群发表演讲, 也参加电视节目, 在大学举办讲座等等. 为什么这么做呢? 他的道理是我们的社会某种程度上是建立在科学和现代技术的基础上, 如果人类中只有极少数人对其原理有一点肤浅的理解, 我们又怎么可能成为成熟社会中有责任感的公民, 并在面对挑战时做出理性的决策呢?&lt;/p&gt;

&lt;p&gt;向公众普及科学并不是容易的事情. 由学校得到的经验, 对于特定的知识点, 看懂和会做题并不是真的懂了, 能够讲出來并让别人也听明白, 才算作真正的理解. 布道者首先需要具备扎实的专业基础, 除此之外, 也需要考虑接受者的能力和品味, 从微信公众号的传播来看, 很多流行的文章并没有体现出多少高级智力活动的特征. 让公众明白并接受自己的观点需要非凡的耐心和同理心.&lt;/p&gt;

&lt;p&gt;《卡尔.萨根的上帝》是卡尔.萨根一系列努力中一环, 书的内容来自作者在苏格兰吉福德讲座的讲稿. 在讲座中, 作者发表了自己对科学和宗教之间边缘区域的观点. 所谓的边缘区域, 指的是宗教教条中由现代科学证伪或者无法通过科学思维证实的部分.&lt;/p&gt;

&lt;p&gt;比如宗教中关于人的起源, 认定人类是上帝按照自己的形象制造出来的. 如果把目光投向星空, 就很容易指出这个观点的薄弱之处. 太阳系中地球之外的其他行星并没有空气, 上帝跟我们一样也有鼻子需要呼吸, 但是他为什么非要把自己局限在地球上呢?&lt;/p&gt;

&lt;p&gt;比如人类是道德的动物, 这一点经常被用来作为上帝存在的证明. 但是深究起来这个观点同样很可疑, 很多动物拥有行为准则, 利他主义、乱伦禁忌、对幼崽的慈爱等, 这些本能的出现与其说来源于上帝的设计, 不如说是自然选择的结果, 因为拥有这些本能的群体更容易让自己的基因延续下去.&lt;/p&gt;

&lt;p&gt;又比如人们遇到无法解释的自然现象或者超出理解范围的事物时往往会归因为神迹. 对此, 卡尔.萨根也作了很好的说明.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;在各个时代都有很多伪造的神迹、预言和超自然事件, 他们要么被相反的证据揭穿, 要么因其本身的荒谬站不住脚, 但是这足以证明人类有一种追求不寻常和非凡的强烈倾向, 所以我们对此类传言应当给予合理的怀疑. 明智的读者可能会说, 奇怪的是这类奇妙的事件在我们的时代从来没有发生过, 但是所有的时代都有谎言毫不奇怪.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;…在买二手车这样的小事上人们尚且会这么做, 在神学、伦理学、道德、世界的本源和人类的本性这些问题上, 难道我们不应该坚持至少同等的怀疑和审视？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;书中涉及到的主题还包含了天文常识、生命起源、外星智慧、以及宗教体验等等, 全书行文流畅、幽默, 阅读起来就像跟充满智慧的长者对话一样.&lt;/p&gt;

&lt;p&gt;刚开始我不太明白, 作者为什么费这么大劲写一整本书来说明上帝是否存在, 至少在小学阶段我就已经懂得, 所有的宗教偶像都是虚幻的. 后来我开始意识到宗教在西方社会占据着特殊地位, 有着巨大的影响力. 但是很少有宗教能够克制自己不对天文学、物理学和生物学发表意见, 在这些方面, 宗教得到的结论和得到结论的方式往往和科学相冲突 , 科学相信的是证据, 而不是盲从和信仰.&lt;/p&gt;

&lt;p&gt;最后推荐一下作者其他著作《魔鬼出没的世界》, 《暗淡蓝点》. &lt;/p&gt;

</description>
        <pubDate>Sun, 27 Dec 2015 00:00:00 +0800</pubDate>
        <link>http://zhenghua.info/%E8%AF%BB%E4%B9%A6/2015/12/27/Karl%E2%80%98s%20god.html</link>
        <guid isPermaLink="true">http://zhenghua.info/%E8%AF%BB%E4%B9%A6/2015/12/27/Karl%E2%80%98s%20god.html</guid>
        
        <category>卡尔.萨根</category>
        
        
        <category>读书</category>
        
      </item>
    
      <item>
        <title>田余庆－东晋门阀政治</title>
        <description>&lt;p&gt;囿于这几年的阅读体验，我习惯性地将历史类著作分成两大类, 一类讲述历史发生了什么, 列举历史事件的细节, 不掺杂价值判断, 这类书可读性不大, 若对具体的历史细节感兴 趣, 可以参考维基百科, 以链接形式组织的文档查阅起来异常方便, 也不容易混淆。另一类讲述历史事件为什么会发生, 侧重介绍历史事件背后的政治、经济、思想文化, 夹杂了较多论证推理和作者的个人观点, 虽说是一家之言,往往能带来不同的视角和启发。&lt;/p&gt;

&lt;p&gt;田余庆先生的这本《东晋门阀政治》, 详细介绍了东晋一朝政治制度的形成和演化过程,属于我前面提到的第二类书。得益于作者思考缜密, 论证有力, 此书面世以来好评如潮,连我这种非专业的读者也会爱不释手。关于书的具体内容,我这里不再赘述, 只谈谈印象较为深刻的三个方面。&lt;/p&gt;

&lt;p&gt;首先是东晋的门阀政治并不等同与分封制度下的贵族政治。世家家族地位的取得, 主要是依靠家族成员获取的政治地位－在朝中掌握中枢或者外任封疆大吏,这些并不 是世袭的。田先生说东晋的门阀政治是传统皇权政治的变态(与常态相对), 是因为某种程度上门阀政治从属于传统的皇权政治, 门阀本身也是整个中央集权体系的 一部分。家族的过往头衔和积累固然重要, 但不是一成不变的。琅琊王氏、颍川庾氏、陈郡谢氏, 在渡江之前不过是二流的士族, 由于渡江后在东晋建国过程中发挥了关键作用或者由于家学传承获得了统治者的青睐, 很快便跻身一流, 而后家族的衰落也跟人才的凋零息息相关。&lt;/p&gt;

&lt;p&gt;其次, 稳定的国家是平衡的政治系 统。这个说法来自于福山在清华演讲时提出的观点, “理想的国家是平衡的政治系统”。他的本意是政府应该拥有强大的行政能力, 同时又要受到监督和制约。东晋 终其一朝, 未能在政治、文化、军事上取得建树, 但是政治上的平衡却无时不在。第一个层面是皇权和士族权力的平衡, 传统皇权政治里, 皇帝掌握至高的权力, 以三公九卿为代表的内阁代为行使皇帝的意志。东晋司马氏的权力基础并不稳固, 皇帝要想巩固自己的权威, 便要依靠低级士族和平民, 但是在东晋的政治语境里, 这些人连获取政治资源的机会都没有。东晋的正统人才选拔制度为九品中正制, 士人获得升迁依赖于中正评定的品级, 品级的高低又取决于家族的实力和候选人的清誉 （例如在玄学上的造诣）, 通过这一点, 门阀成功地将低级士族和平民隔绝在体制外。第二个层面是士族之间的平衡, 庾氏掌握荆州和梁州时, 琅琊王氏便要争夺江 州；桓氏势大时, 谢氏转而专心经营豫州；王敦和桓玄起兵时, 其他士族便要联合起来共同维护司马氏的统治。对于士族来讲, 一条不成文的规则是, 皇权扩张时,  要及时制止皇帝的野心；皇权式微时, 便要维护皇帝的权威, 稳定的门阀政治最符合门阀整体的利益。&lt;/p&gt;

&lt;p&gt;最后是意识形态由儒入玄但儒学犹得不绝。魏 晋以来, 玄学逐渐取代了儒学的统治地位, 以竹林七贤为代表的玄学名士备受推崇, 这会让人产生一种错觉, 以为儒学已然衰微难以维系。然而儒学自有其社会效 用, 儒家基本思想或者被包涵于玄学之中, 或者尚独立存在于玄学之外, 继续起着或多或少的作用。“遵儒者之教,履道家之言”, 是多数当政居位的玄学名士立身行事的共同倾向。一些上流社会的玄学名士如刘惔、王濛辈,但求放达, 不谙世务, 虽有清誉, 但往往沦为真正掌权者的笑柄。清谈名士是门阀政治的点缀, 世家大 族真正的基础和底蕴, 经济上体现在田产的多寡；政治上体现在官场要职和军队的掌控；组织上体现在对家族的认同, 这些跟儒学的修齐治平理念是切合的。&lt;/p&gt;

</description>
        <pubDate>Mon, 30 Nov 2015 00:00:00 +0800</pubDate>
        <link>http://zhenghua.info/%E8%AF%BB%E4%B9%A6/2015/11/30/politics_of_dongjin_dynasty.html</link>
        <guid isPermaLink="true">http://zhenghua.info/%E8%AF%BB%E4%B9%A6/2015/11/30/politics_of_dongjin_dynasty.html</guid>
        
        <category>history</category>
        
        
        <category>读书</category>
        
      </item>
    
      <item>
        <title>知识的边界</title>
        <description>&lt;p&gt;我还在学校念书的时候，参与过译言网的一个协作翻译项目。项目组织者将外文书按章节划分，每个志愿者负责一部分，然后交由项目负责人评审。经过评审、修改、反馈，迭代数个周期后，  译稿最终付梓出版。&lt;/p&gt;

&lt;p&gt;项目发起之初衷，是希望将尽可能多的优秀外文书籍，以最快的速度推向中文读者。现如今书籍的出版速度越来越快，每年有无数外文书籍出版，传统的引进方式，已然无法满足需求。&lt;/p&gt;

&lt;p&gt;这种协作方式的缺点在于无法保证翻译质量。因为参与项目的志愿者大多抱有提升英文水平的想法，自身翻译水平有限；另一方面，多个志愿者的翻译风格也很难保持统一。所以在选择翻译标的的时候，以快餐文学和名人回忆录居多。&lt;/p&gt;

&lt;p&gt;在我的父辈们看来，书籍是值得严肃对待的物品，写书出版更是一件很神圣的事情。或者在古代的中国，纸张昂贵，识字率低，没有公立学校，书籍往往是留给子孙最有价值的财产。彼时彼刻，书籍既是知识的承载者，同时也是权力的阶梯。说“书中自有黄金屋”，一点也不过分。&lt;/p&gt;

&lt;p&gt;到了今天，情况发生了很大的变化。&lt;/p&gt;

&lt;p&gt;出版书籍变成了商业行为，门槛降低，很多非专业的公众人物也开始出版自传或者随笔，因为这在商业上有利可图。我并非在否定这类出版行为的意义，只是意在说明，现如今纸质媒介正在以一种极高的速率膨胀。而且随着时间世代延续，书籍的数量会一直增加。所以，人们可以料想，这样一个时刻终会来临，届时人们从书中学习东西，都像是从浩瀚的宇宙中直接学习一样困难。&lt;/p&gt;

&lt;p&gt;不仅仅是书籍，互联网的出现也使得信息以极快的速度膨胀。如今人们一次google获取的信息也许比一座小型图书馆包含的信息还多。这是一个信息过载的时代。&lt;/p&gt;

&lt;p&gt;作为应对措施，人们发明了各种各样的过滤机制。&lt;/p&gt;

&lt;p&gt;传统上，公立学校会有一套教材清单，这是一套过滤机制，决定了学生们在学校会学习到什么内容；图书馆的采编委员会起到了类似的作用，决定了我们在图书馆会看到什么书籍，这些书数量有限，相对于每年出版的所有书籍来说，仅是沧海一粟。在互联网时代，新的过滤机制不再仅仅以内容为维度进行区分。比方说google等搜索引擎依靠算法来保证信息的质量，而这些算法依赖的指标除内容外，还增加了点击数和链接数目等。微信朋友圈的过滤机制依赖于用户的社交网络；而在程序员和学生中广受欢迎的知乎，大V们在很大程度上扮演了过滤器的作用。&lt;/p&gt;

&lt;p&gt;获取知识的新方式正日益明朗，虽然我们还不能确切知道它的成熟态，但某些方面已经慢慢成型。网络化的知识不是那么令人信赖，但却更加全面包容；不是那么一以贯之却更加丰富多元。&lt;/p&gt;

&lt;p&gt;在《知识的边界》里，作者遵循一种“独特的路径”（每个章节探讨特定的主题，然后连成一线）来探讨这个大到不可知的领域。所谓大到不可知，是指知识的范畴广阔到我们不可能了解全部。&lt;/p&gt;

&lt;p&gt;一、云上的专家&lt;/p&gt;

&lt;p&gt;互联网首要的也是最明显的一个特点就是它造就了有史以来最大的群体。这种规模上的巨大性也造就了新的可能性，一群本不相关的人共同解决问题，或者为那些大到任何专家个人都无法解决的议题提供知识资源。利用“网络化的知识”，问题的响应速度越来越快。当有足够多的人参与的时候，足够的宽度本身就成为了一种深度。&lt;/p&gt;

&lt;p&gt;『2007年，美国溢油防治技术研究所提供两万美元奖金，奖励第一位能将沉在阿拉斯加海底18年的溢油抽出来的人。直接把石油抽出来没用，因为当它到达海面时，冰冷的阿拉斯加空气会让石油和水的混合物凝固。一位住在伊利诺伊州的化学家，虽然不太懂石油，但他非常懂水泥，只要一直震动，水泥就不会凝固。应用这种思路，问题最终得到解决』&lt;/p&gt;

&lt;p&gt;在网络时代，“房间里最聪明的人不是站在讲台前给我们讲课的人，也不是房间里所有人的集体智慧。房间里最聪明的人就是房间本身：房间联接人们和思想并连接外部的网络。”就像生命并非活在我们的神经、骨骼、血液、骨髓之中，而活在这一切所构成的联系之中。网络化的知识，会让我们更加接近关于知识的真理。&lt;/p&gt;

&lt;p&gt;二、互联网让我们变笨了？&lt;/p&gt;

&lt;p&gt;每个人都可以有他自己的观点，但不可以有他自己的事实。”（Everyone is entitled to his own opinions，but not to his own facts.）&lt;/p&gt;

&lt;p&gt;纸张的局限让事实看上去比现在更易控制，因为现在我们眼见着事实被链接进了不受限制的网络中。一方面，我们希望能有更多意外发现带来的惊喜（serendipity），如此一来，人们便不会被束缚在他们的舒适区。另一方面，几乎所有的人都在抱怨互联网太分散人们的注意力，充斥了过多的意外。可利用信息数量的大幅增加反而让我们比以往更容易犯错。我们可以随手获得如此多的事实，以至于失去了得出结论的能力，因为总是有其他事实支持其他的说法。&lt;/p&gt;

&lt;p&gt;互联网本身包含丰富的多样性，存在太多的分歧。没有一个突出的占据优势地位的观点，我们将会迷失在一个不同观点织就的漩涡里。我们需要人们对任何事都无法达成共识且将来也无法达成共识的世界里探索如何获得知识。&lt;/p&gt;

&lt;p&gt;我们之所以又这些矛盾，是因为网络上观点杂乱，迫使我们去面对知识策略中的那种张力，而这种张力此前被旧式的知识媒介所掩盖。我们原以为知识会在一个生机勃勃的“观念市场”中繁荣增长，因为以纸张为载体的知识将绝大部分的竞争性观念排除在我们的本地市场之外。现在我们看到自己身边的各种观念是如此地多元和互异－－因为总的来说，互联网过滤器并不会真的删掉东西，而只是把受青睐的材料拿得更近一些－－我们对这种新的多样性得价值感到极度困惑。&lt;/p&gt;

&lt;p&gt;三、知识的新结构&lt;/p&gt;

&lt;p&gt;丰富性，对知识得寻觅者而言，现在知识的基础设施以及搜索工具，让我们能够基础到比以往任何时候都多得作品。数字化令寻找信息变得便利。只要轻轻一点，就可以在马尔萨斯作品的第六版和第一版之间转换，然后发现第一版完全缺少数据支撑－如果在当地的图书馆里，这简直是一项不可能完成的任务。新技术极大地改进了研究者的能力，他们可以从容不迫地寻找资料，或者深入地挖掘信息。&lt;/p&gt;

&lt;p&gt;链接。现代出版的学术作品，几乎处处都是脚注，部分是为了验证观点，但更多的为了避免侵犯这个疯狂时代中别人对观点的微观所有权。链接改变了知识基本的拓扑结构，发展出的观点的每一个小片段，都存在于一个相互关联的、没有阻隔的网络中，我们知道的每一个主题都不限于它所讲述的内容，因为我们会看到那些链接，一天之内就可以访问上千个相关网页。&lt;/p&gt;

&lt;p&gt;无需许可。传统上知识像是一个俱乐部，它接纳新成员，一本书、一篇论文、一种观点都必须在经过了有资质的专家团体的检查之后才成为可能。如果任何人都能随意出版任何东西，任何人收集几个链接就可以管理资料库，那么知识俱乐部就失去了价值。知识的排他性已经渐渐丧失。&lt;/p&gt;

&lt;p&gt;公共性。曾经，我们认为不让普通人接触到重要知识是为了他们好。很长一段时间，我们只教给儿童足够去天地或者工厂干活的知识。而现在，我们给公众的，不仅仅时教育、图书馆，还有一种通道、一键点击即可接触到近乎无限的知识和文化作品。&lt;/p&gt;

&lt;p&gt;四. 有效地利用知识&lt;/p&gt;

&lt;p&gt;开放通道。纸张特性需要出版商审慎选择印刷内容是一回事，而出版商将自己的作品定价过高以至于只有精英才能读得起是另一回事。当学术期刊收取每年2万美元的订阅费时，它们已经变成了获取知识的障碍，而非动力。于是开放取用运动的成功几乎是不可避免的，因为无论是从经济上还是社会趋势上都注定了如此。&lt;/p&gt;

&lt;p&gt;萃取优质信息。丰富性也存在两个主要的风险，首先，我们找不到需要的东西；其次，我们会找到很多迎合我们最低需求的有吸引力的东西。解决信息超载的方法是创造更多的信息：元数据。网络上大部分东西都是垃圾。所以我们需要找到方法去评估它们。有些这样的元数据的增多需要人们付出更加明显的努力：我们积累数据的集合，给它们打分、留言、写评论，或者像亚马逊一样用算法来实现。&lt;/p&gt;

&lt;p&gt;链接一切。链接可以将作品置于上下文之中，促使我们去学习更多的东西。一个从慢思想的网络，让我们得以一窥纸张的背后，也得以跟随自己的兴趣在网络的边疆自由穿行，它也构成了一个聪明的模式。&lt;/p&gt;

&lt;p&gt;不要把制度化知识留在身后。传统机构的力量所在（提供知识的资质），同时也是他们的弱点所在。他们将所有的知识者聚在一起，但是没有几个申请人能够进入。机构隔绝了外界，同样也孤立了思想。即使我们称它们形成了“思想流派”，其实机构更像回声室。网络不会摧毁所有的机构，相反机构正在更加深入地嵌入到网络中。而且网络也发展出了自己的机构，拥有和传统机构同样的弱点。如果网络想成为知识的新的基础设施，那么它就必须利用好所有现存的机构发展出来的知识。&lt;/p&gt;

&lt;p&gt;学会热爱不同。当我们限制自己、不允许自己的舒适受到一丁点打扰的时候，就是我们变蠢的时候。如果希望网络容纳知识的能力最大化，我们就需要超越内心的惰性：和像我们一样的人黏在一起。&lt;/p&gt;

&lt;p&gt;五. 下一个达尔文是数据狂人？&lt;/p&gt;

&lt;p&gt;达尔文在思想史上迈出了任何人都没有预测到的一大步。这一步，是数年辛勤工作和数千盈利的周游后得到的。&lt;/p&gt;

&lt;p&gt;但是从另一个角度解读，达尔文的观点也是从一个丰富的网络中发展出来的，如果没有拉玛克的工作，达尔文可能根本不会想到进化论。如果没有查尔斯.莱尔的《地质学原理》，那他可能也根本不会有生命在漫长的时间内逐步演化的想法。达尔文所处的网络是由同事和书信往来的人组成。&lt;/p&gt;

&lt;p&gt;下一个达尔文，他的工作很可能是公开进行的，也就是说，是在一个相互链接的网上进行的。他可能不会等到有最终结论才发表，而是会在网上贴出自己的早期成果，然后他的文字一发表，一个链接之网就在他周围生成。某些节点会变成中心。最终这个网络中会产生出新的观点并将观点传播出去。&lt;/p&gt;
</description>
        <pubDate>Thu, 30 Jul 2015 00:00:00 +0800</pubDate>
        <link>http://zhenghua.info/%E8%AF%BB%E4%B9%A6/2015/07/30/too_big_too_know.html</link>
        <guid isPermaLink="true">http://zhenghua.info/%E8%AF%BB%E4%B9%A6/2015/07/30/too_big_too_know.html</guid>
        
        
        <category>读书</category>
        
      </item>
    
      <item>
        <title>遐想四-毕业两周年</title>
        <description>&lt;p&gt;1.毕业之后，时间过得越来越快，年初还有很多美好的想法,期待着发生很多事情，转眼到了年中，结果什么事情也没有发生，莫名就觉得很惆怅。&lt;/p&gt;

&lt;p&gt;2.硕士研究生三年制太长了，设置为一年比较合适。不然等到毕业,青春消逝殆尽,无论干什么事都多了一层焦虑感。而且，和导师相处得时间过长，人性猥琐的一面充分暴露出来,最后大家相互嫌弃,所谓师道尊严就成了笑话。&lt;/p&gt;

&lt;p&gt;3.以前在实验室，导师放养的话，学生找的工作都还不错；导师要求严格，学生找到的工作相对要逊一些。有些师弟因为没有找到理想的工作而烦恼, 大可不必,以后的路还长着呢。&lt;/p&gt;

&lt;p&gt;4.保罗.格雷厄姆在自己的博客中提到，即便再最高新的技术企业里，也有90%的工作内容是重复或无聊的。重复和繁重的工作会磨灭人的理想和激情，解决方案是尽早发现的兴趣所在或者争取实现财务自由。&lt;/p&gt;

&lt;p&gt;5.说到挣钱，分享一个很有意思的观点。如果把人一生赚的钱分成两部分，四十岁以前和四十以后，那么前者只占总体的很少一部分。所以在面临人生重大决定时，不妨将目光放长远些。&lt;/p&gt;

&lt;p&gt;6.毕业后去了农行，一家典型的巨无霸国企。我能够理解老一辈的人为什么会推崇国企，国企更容易给人安全感。一直到现在，农行软开新进员工的整体素质还是优于一些主流的互联企业。&lt;/p&gt;

&lt;p&gt;7.然后我又离开了。离开的时候先后被处长、副总、老总和书记约谈，我表达的都是同一个意思，”我本人对技术比较感兴趣，但现在做的工作都是在实现业务流程。而且刚毕业的时候不知道自己想要什么，给农行造成困扰，我很抱歉。。。”&lt;/p&gt;

&lt;p&gt;8.没有说出来的原因是,这个世界变化很快，而待在农行软开却丝毫感受不到这一点，随着时间流逝，我担心自己会变成井底之蛙。当然也可以多待几年，然后跳去股份制银行或者券商基金。可是我现在的兴趣不在这里，而且，即便我在互联网多待几年，再跳去券商基金也比农行容易。&lt;/p&gt;

&lt;p&gt;9.以前在某基金公司实习，总经理在总结选股得失的时候，喜欢强调“痛苦的思索，深刻的反省”。我当时太年轻，不能理解这种强力的词汇.但是经历过人生的一些起落后发现，有时候真的很难用语言来形容当时当地的喜悦或懊恼。&lt;/p&gt;

&lt;p&gt;10.不要过于在乎别人的想法，尤其是兴趣和志向不同的人；不要试图成为一个好人，要成为一个强大的人；人这一生还是要做成一件事情，不然白活了。&lt;/p&gt;
</description>
        <pubDate>Fri, 24 Jul 2015 00:00:00 +0800</pubDate>
        <link>http://zhenghua.info/%E6%80%BB%E7%BB%93%E4%B8%8E%E9%81%90%E6%83%B3/2015/07/24/some_thoughs_when_work_for_two_years.html</link>
        <guid isPermaLink="true">http://zhenghua.info/%E6%80%BB%E7%BB%93%E4%B8%8E%E9%81%90%E6%83%B3/2015/07/24/some_thoughs_when_work_for_two_years.html</guid>
        
        
        <category>总结与遐想</category>
        
      </item>
    
      <item>
        <title>分布式一致性－PAXOS算法</title>
        <description>&lt;p&gt;在分布式系统中，每一个机器节点虽然读能够明确地知道自己在进行事物操作过程中的结果是成功还是失败，但却无法直接获取到其他分布式节点的操作结果。因此，当一个事物操作需要跨越多个分布式节点的时候，为了保持事物处理的ACID特性，就需要映入一个称为”协调者”(Coordinator)的组件来统一调度所有分布式节点的执行逻辑，这些被调度的分布式节点则被称为”参与者”(Participant)。&lt;/p&gt;

&lt;p&gt;假设有一组可以提出提案的进程集合，那么对于一个一致性算法来说需要保证以下几点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;在这些被提出的提案中，只有一个会被选定&lt;/li&gt;
  &lt;li&gt;如果没有提案被提出，那么就不会有被选定的提案&lt;/li&gt;
  &lt;li&gt;当一个提案被选定后，进程应该可以获取被选定的提案信息&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;对于一致性来说，安全性(sagety)需求如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;只有被提出的提案才能被选定(chosen)&lt;/li&gt;
  &lt;li&gt;只能有一个值被选定&lt;/li&gt;
  &lt;li&gt;如果某个进程认为某个提案被选定了，那么这个提案必须是真的被选定的那个&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;从整体上来说，Paxos算法的目标就是要保证最终有一个提案会被选定，当提案被选定后，进程最终也能获取到被选定的提案。&lt;/p&gt;

&lt;p&gt;在Paxos算法中，有三种参与角色，我们用Proposer,Acceptor和Learner来表示。在具体实现中，一个进程可能充当不止一种角色，在这里我们并不关心进程如何映射到各种角色。假设不同参与者之间可以通过收发消息来进行通信，那么：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;每个参与者以任意速度执行，可能会因为出错而停止，也可能重启。同时，即使一个提案被选定后，所有的参与者也都有可能失败或重启，因此除非那些失败或重启的参与者可以记录某些信息，否则将无法确定最终的值。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;消息在传输过程中可能会出现不可预知的延迟，也可能会重复或丢失，但是消息不会被损坏，即消息内容不会被篡改&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section&quot;&gt;提案的选定&lt;/h3&gt;

&lt;p&gt;可以使用多个Acceptor来避免Acceptor的单点问题。在存在多个Acceptor的情况下，Proposer向一个Acceptor集合发送提案，集合中的每个Acceptor都可能会批准(Accept)该提案，当有足够多的Acceptor批准这个提案的时候，我们就可以认为该提案被选定了。什么是足够多呢？我们假定足够多的Acceptor是整个Acceptor集合的一个子集，并且让这个集合大得可以包含Acceptor集合中的大多数成员，因为任意两个包含大多数Acceptor的自己至少有一个公共成员。另外我们再规定，每一个Acceptor最多只能批准一个提案，那么就能保证只有一个提案被选定了。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;算法陈述&lt;/h3&gt;

&lt;p&gt;阶段一：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Proposer选择一个提案编号M，然后向Accpter的某个超过半数的子集成员发送编号为M的Prepara请求&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;如果一个Acceptor收到一个编号为M的prepare请求，且编号M大于该Acceptor已经响应的所有Prepare请求的编号，那么它就会将它已经批准过的最大编号的提案作为响应反馈给Proposer，同时该Acceptor会承诺不会再批准任何编号小于M的提案。举个例子，假定一个Acceptor已经响应过的所有Prepare请求对应的提案编号分别为1,2,…5和7，那么该Acceptor在接收到一个编号为8的Prepare请求后，就会将编号为7的提案作为响应反馈给Proposer&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;阶段二：
1. 如果Proposer收到半数以上的Acceptor对于其发出的编号为M的prepare请求的响应那么他就会发送一个针对［M, V]提案的Accept请求给Acceptor。注意，V的值就是收到的响应中编号最大的提案的值，如果响应中不包含任何提案，那么它就是任意值。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;如果Acceptor收到这个针对[M，V]提案的Accept请求，只要该Acceptor尚未对编号大于M的Prepare请求做出响应，它就可以通过这个提案。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;section-2&quot;&gt;提案的获取&lt;/h3&gt;

&lt;p&gt;方案一：&lt;/p&gt;

&lt;p&gt;Learner获取一个已经被选定的提案的前提是，该提案已经被半数以上的Acceptor皮春，因此最简单的做法就是一旦Acceptor批准了一个提案，就将该提案发送给所有的Learner。&lt;/p&gt;

&lt;p&gt;这种做法需要每个Acceptor和所有的Learner逐个进行一次通信，通信次数至少为二者个数的乘积&lt;/p&gt;

&lt;p&gt;方案二：&lt;/p&gt;

&lt;p&gt;让所有的Acceptor将它们对提案的批准情况，统一发送给一个特定Learner（称为“主Learner”），在不考虑拜占庭将军问题的前提下我们假定Learner之间可以通过消息通信来互相感知提案的选定情况。基于这样的前提，当主Learner被通知一个提案已经被选定时，它会负责通知其他的Learner。&lt;/p&gt;

&lt;p&gt;这种做法的风险在于：主Learner随时可能出现鼓掌。&lt;/p&gt;

&lt;p&gt;方案三：&lt;/p&gt;

&lt;p&gt;针对方案二的单点问题，可以将主Learner的范围扩大，即Acceptor可以将批准的提案发送给一个特定的Learner集合，该集合中的每个Learner都可以在一个提案被选定后通知所有其他的Learner。这个Leaner集合的元素个数越多，可靠性就约好，但同时网络通信的复杂度也就越高。&lt;/p&gt;

&lt;h3 id=&quot;proposer&quot;&gt;通过选取主proposer保证算法的活性&lt;/h3&gt;

&lt;p&gt;可能会存在这样一种极端情况，有两个Proposer依次提出了一系列编号递增的议案，但是最终都无法被选定。解决这个问题可以选择一个主Proposer，并规定只有主Proposer才能提出议案。这样一来，只要主Proposer和过半Acceptor能够正常进行网络通信，那么但凡主Proposer提出一个编号更高的提案，该提案终将会被批准。&lt;/p&gt;

</description>
        <pubDate>Tue, 23 Jun 2015 00:00:00 +0800</pubDate>
        <link>http://zhenghua.info/%E8%AF%BB%E4%B9%A6/2015/06/23/from_paxos_to_zookeeper.html</link>
        <guid isPermaLink="true">http://zhenghua.info/%E8%AF%BB%E4%B9%A6/2015/06/23/from_paxos_to_zookeeper.html</guid>
        
        <category>分布式系统</category>
        
        
        <category>读书</category>
        
      </item>
    
      <item>
        <title>大教堂与集市</title>
        <description>&lt;p&gt;一&lt;/p&gt;

&lt;p&gt;在quora上看到的问题「为什么会有人无偿创建像维基百科这样的网站?」，吉米.威尔士本人的回答是，「因为这棒极了（awesome)」。我认为这个回答较好地体现了黑客精神，因此特意摘录了下来。&lt;/p&gt;

&lt;p&gt;二&lt;/p&gt;

&lt;p&gt;那么究竟什么是黑客精神呢？&lt;/p&gt;

&lt;p&gt;长期以来，存在一个崇尚高尚文化且成员都是编程专家和网络高手的社区（早期网络和主机普及度不高，所以用户大多来自学术圈或大公司实验室），这个社区的成员创造了黑客一词，黑客构建了互联网、UNIX操作系统、Usenet以及广泛应用的万维网WWW。&lt;/p&gt;

&lt;p&gt;这个世界充满了各种各样迷人的问题，黑客的使命是去解决这些问题。成为一名黑客意味着对解决问题、磨砺技能和智力挑战有着基本的兴奋感。&lt;/p&gt;

&lt;p&gt;黑客精神并不局限于软件文化中。人们会把黑客态度用在其他事情上，比如电子或音乐。对任何科学和艺术，在其最高水平的活动中都可以发现这种精神。&lt;/p&gt;

&lt;p&gt;三&lt;/p&gt;

&lt;p&gt;要向外行解释软件开发这个行当，可以用建筑业来进行类比，开发一个软件就像盖一栋房子。&lt;/p&gt;

&lt;p&gt;若要盖一个教堂，需要事先进行设计，收集原材料，然后将优秀的工匠集中在一起，这些人经过几个月或几年与外界相对隔绝的工作状态后最终产生了成果。大教堂的特点是封闭式建设、成本高、品质优异。传统的软件开发理念大多是基于这一模式。&lt;/p&gt;

&lt;p&gt;与大教堂相对应的是集市。集市的特点是开放式建设、成本低、品质平庸，但是如果将软件开发置于透明和民主的氛围中，更好的完善其开发过程，也同样能够减少最终Bug的产生。&lt;/p&gt;

&lt;p&gt;绝大多数商业公司采用了“大教堂”模式，而以Linux为代表的开源软件采用的是“集市”模式，两者根本不同点在于他们对软件排错有着完全对立的认识。从Linux的经验出发，证实了这样一个命题“只要眼睛多，bug容易捉”，这和那些由利己主义个体组成的自纠错系统有着异曲同工之妙。&lt;/p&gt;

&lt;p&gt;互联网的普及，使得黑客之间有了广泛的交流与合作，他们编些软件时所采用的便是集市模式。黑客们卓越的天赋和工作成果产生了广泛的影响，引发了后来轰轰烈烈的开源运动。&lt;/p&gt;

&lt;p&gt;现如今广泛使用的Linux、Apache、Nginx、Mysql等都是开源软件。&lt;/p&gt;

&lt;p&gt;四&lt;/p&gt;

&lt;p&gt;黑客们参与开源运动的热情可以归结为“礼物文化”。&lt;/p&gt;

&lt;p&gt;“礼物文化”指的是，参与者付出时间、精力和创意，去竞争获取声望的文化。这类似于法律和政治学里关于土地所有制的习惯法理论，如果边缘地区有一块土地，人们可以通过开垦、耕种、守护来获取土地所有权，与之相对应的是，黑客们通过贡献和维护代码来体现在项目中的地位。&lt;/p&gt;

&lt;p&gt;自由市场经济是全世界范围内通过合作获得经济效能的最佳方法，这一点看来已成为历史定论，同样，基于声誉竞争的礼物文化可能是通过合作产生（和检验）高质量创造性工作的最佳方法。&lt;/p&gt;

&lt;p&gt;五&lt;/p&gt;

&lt;p&gt;开源是一种手段，而不是目的。&lt;/p&gt;

&lt;p&gt;我们总能在宗教和政治领域看到各种各样的原教旨主义者。在软件开发领域也同样如此，比方说Richard Stallman坚持认为贩卖不附带源代码的二进制软件是十分不道德的。这种指责虽然尖刻，但并不能给竞争对手带来实质性的损害。&lt;/p&gt;

&lt;p&gt;软件开发附属于商业行为基础之上，否定这个基础并不是理性务实的做法。只有证明自己的商业潜力，开源运动才能获得主流媒体和华尔街的认同，进一步的发展和扩张才有可能持续。&lt;/p&gt;

</description>
        <pubDate>Fri, 12 Jun 2015 00:00:00 +0800</pubDate>
        <link>http://zhenghua.info/%E8%AF%BB%E4%B9%A6/2015/06/12/the_cathedral_and_the_bazaar.html</link>
        <guid isPermaLink="true">http://zhenghua.info/%E8%AF%BB%E4%B9%A6/2015/06/12/the_cathedral_and_the_bazaar.html</guid>
        
        
        <category>读书</category>
        
      </item>
    
      <item>
        <title>大型网站技术架构-网站高可用架构</title>
        <description>&lt;p&gt;&lt;strong&gt;一、网站可用性度量&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;网站不可用时间(故障时间)=故障修复时间点－故障发现(报告)时间点&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;网站年度可用性指标＝(1-网站不可用时间/年度总时间)＊100%&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;对于大多数网站而言,2个9是基本可用，网站年度不可用时间小于88小时；3个9是较高可用，网站年度不可用时间小于9小时；4个9是具有自动回复能力的高可用，网站年度不可用时间小于53分钟；5个9是极高可用，网站年度不可用时间小于5分钟。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;二、网站可用性考核&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;故障权重分类：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;事故级故障：严重故障，网站整体不可用，权重100；&lt;/li&gt;
  &lt;li&gt;A类故障：网站访问不顺畅或核心功能不可用，权重20；&lt;/li&gt;
  &lt;li&gt;B类故障：非核心功能不可用，或核心功能少数用户不可用，权重5；&lt;/li&gt;
  &lt;li&gt;C类故障：以上故障以外的其他故障，权重1.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;故障分＝故障时间(分钟)＊故障权重&lt;/p&gt;

&lt;p&gt;在年初或者考核季度的开始，会根据网站产品的可用性指标计算总的故障分，然后根据团队和个人的职责角色分摊故障分，这个可用性指标和故障分是管理预期。在实际发生故障的时候，根据故障分类和责任划分将故障产生的故障分分配给责任者承担。等年末或者考核季末的时候，个人级团队实际承担的故障分如果超过了年初分摊的故障分，绩效就会受到影响。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;三、高可用的应用&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;一个典型的网站可以大致分为应用层、服务层、数据层三个层次。&lt;/p&gt;

&lt;p&gt;应用服务器的高可用架构设计主要基于服务无状态性这一特性，但是事实上，业务总是有状态的，比方说在电商网站中，需要有购物车记录用户的购买信息。Web应用中将这些多次请求修改使用的上下文对象称作会话(Session),单机情况下，Session可由部署在服务器上的Web容器（如JBoss）管理。在使用负载均衡的集群环境中，由于负载均衡服务器可能会将请求分发到集群任何一台应用服务器上，所以保证每次请求依然能够获得正确的Session比单机时要复杂很多。&lt;/p&gt;

&lt;p&gt;集群环境下Session管理主要有以下几种手段：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Session复制：每台服务器上都保存所有用户的Session信息，优点是简单，只能使用在在集群规模比较小的情况下。&lt;/li&gt;
  &lt;li&gt;Session绑定:利用负载均衡的源地址Hash算法实现，将来源于同一IP的请求分发到同一台服务器上（也可以根据Cookie信息将同一个用户的请求总是分发到同一台服务器上，前提是负载均衡服务器必须工作在HTTP协议层上）&lt;/li&gt;
  &lt;li&gt;利用Cookie记录Session，缺点是受Cookie大小限制&lt;/li&gt;
  &lt;li&gt;Session服务器，采用专门的Session服务器来同一管理Session。对于有状态的Session服务器，一种比较简单的方法是利用分布式缓存、数据库等，在这些产品的基础上进行包装，使其符合Session的存储和访问要求。如果业务场景对Session管理有比较高的要求，比如利用Session服务集成单点登录(SSO)、用户服务等功能，需要开发专门的Session服务管理平台。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;四、高可用的服务&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;分级管理：高优先级服务部署在不同的物理机上，核心服务和数据考虑部署在不同地域的数据中心。低优先级服务通过启动不同线程或者部署在不同的虚拟机上进行隔离。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;超时设置：设置服务调用超时时间，一旦超时，抛出异常，服务调度策略可选择重试或将请求转移到提供相同服务的其他服务器上&lt;/li&gt;
  &lt;li&gt;异步调用：应用对服务的调用通过消息队列等异步方式完成，避免一个服务失败导致整个应用请求失败的情况。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;服务降级&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;拒绝服务：拒绝低优先级应用的调用，减少服务调用并发数，或者随机拒绝部分请求调用，节约资源&lt;/li&gt;
  &lt;li&gt;关闭服务：关闭部分不重要的服务&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;冥等性设计&lt;/p&gt;

&lt;p&gt;服务重复调用是无法避免的，应用层也不需要关心服务是否真的失败，只要没有受到调用成功的响应，就可以认为调用失败，并重试服务调用。因此必须保证服务重复调用和调用一次产生的结果相同，即服务具有冥等性。（常见的如转账操作）&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;五、高可用的数据&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;CAP原理：一个提供数据服务的存储系统无法同时满足数据一致性(consistency)、数据可用性(Availability)、分区耐受性(Patition Tolerance,系统具有跨网络分区的伸缩性)。CAP原理对于可伸缩的分布式系统设计具有重要意义，在系统设计开发过程中，不恰当地迎合各种需求，企图打造一个完美的产品，可能会使设计进入两难境地，难以为继。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;六、网站发布&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;灰度发布：大型网站的主要业务服务器集群规模非常庞大，一旦发现故障，即使想要发布回滚也需要很长时间才能完成。为了应付这种局面可以将集群服务器分成若干部分，每天只发布一部分服务器，观察运行稳定没有故障，然后继续发布一部分服务器，往往持续几天才把整个集群全部发布完毕，期间如果发现问题，只需要回滚已发布的一部分服务器即可。&lt;/p&gt;

</description>
        <pubDate>Mon, 25 May 2015 00:00:00 +0800</pubDate>
        <link>http://zhenghua.info/%E8%AF%BB%E4%B9%A6/2015/05/25/High_availability_architecture.html</link>
        <guid isPermaLink="true">http://zhenghua.info/%E8%AF%BB%E4%B9%A6/2015/05/25/High_availability_architecture.html</guid>
        
        <category>架构</category>
        
        
        <category>读书</category>
        
      </item>
    
  </channel>
</rss>
