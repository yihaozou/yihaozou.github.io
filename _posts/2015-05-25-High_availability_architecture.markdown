---
author: 邹政华
comments: true
date: 2015-5-25
published: true 
tags: 架构
layout: post
title:  大型网站技术架构-网站高可用架构
categories: 读书 
---


**一、网站可用性度量**


- 网站不可用时间(故障时间)=故障修复时间点－故障发现(报告)时间点

- 网站年度可用性指标＝(1-网站不可用时间/年度总时间)＊100%

对于大多数网站而言,2个9是基本可用，网站年度不可用时间小于88小时；3个9是较高可用，网站年度不可用时间小于9小时；4个9是具有自动回复能力的高可用，网站年度不可用时间小于53分钟；5个9是极高可用，网站年度不可用时间小于5分钟。


**二、网站可用性考核**


故障权重分类：

- 事故级故障：严重故障，网站整体不可用，权重100；
- A类故障：网站访问不顺畅或核心功能不可用，权重20；
- B类故障：非核心功能不可用，或核心功能少数用户不可用，权重5；
- C类故障：以上故障以外的其他故障，权重1.

故障分＝故障时间(分钟)＊故障权重

在年初或者考核季度的开始，会根据网站产品的可用性指标计算总的故障分，然后根据团队和个人的职责角色分摊故障分，这个可用性指标和故障分是管理预期。在实际发生故障的时候，根据故障分类和责任划分将故障产生的故障分分配给责任者承担。等年末或者考核季末的时候，个人级团队实际承担的故障分如果超过了年初分摊的故障分，绩效就会受到影响。

**三、高可用的应用**

一个典型的网站可以大致分为应用层、服务层、数据层三个层次。

应用服务器的高可用架构设计主要基于服务无状态性这一特性，但是事实上，业务总是有状态的，比方说在电商网站中，需要有购物车记录用户的购买信息。Web应用中将这些多次请求修改使用的上下文对象称作会话(Session),单机情况下，Session可由部署在服务器上的Web容器（如JBoss）管理。在使用负载均衡的集群环境中，由于负载均衡服务器可能会将请求分发到集群任何一台应用服务器上，所以保证每次请求依然能够获得正确的Session比单机时要复杂很多。

集群环境下Session管理主要有以下几种手段：

- Session复制：每台服务器上都保存所有用户的Session信息，优点是简单，只能使用在在集群规模比较小的情况下。
- Session绑定:利用负载均衡的源地址Hash算法实现，将来源于同一IP的请求分发到同一台服务器上（也可以根据Cookie信息将同一个用户的请求总是分发到同一台服务器上，前提是负载均衡服务器必须工作在HTTP协议层上）
- 利用Cookie记录Session，缺点是受Cookie大小限制
- Session服务器，采用专门的Session服务器来同一管理Session。对于有状态的Session服务器，一种比较简单的方法是利用分布式缓存、数据库等，在这些产品的基础上进行包装，使其符合Session的存储和访问要求。如果业务场景对Session管理有比较高的要求，比如利用Session服务集成单点登录(SSO)、用户服务等功能，需要开发专门的Session服务管理平台。

**四、高可用的服务**

- 分级管理：高优先级服务部署在不同的物理机上，核心服务和数据考虑部署在不同地域的数据中心。低优先级服务通过启动不同线程或者部署在不同的虚拟机上进行隔离。

- 超时设置：设置服务调用超时时间，一旦超时，抛出异常，服务调度策略可选择重试或将请求转移到提供相同服务的其他服务器上
- 异步调用：应用对服务的调用通过消息队列等异步方式完成，避免一个服务失败导致整个应用请求失败的情况。

服务降级

- 拒绝服务：拒绝低优先级应用的调用，减少服务调用并发数，或者随机拒绝部分请求调用，节约资源
- 关闭服务：关闭部分不重要的服务

冥等性设计

服务重复调用是无法避免的，应用层也不需要关心服务是否真的失败，只要没有受到调用成功的响应，就可以认为调用失败，并重试服务调用。因此必须保证服务重复调用和调用一次产生的结果相同，即服务具有冥等性。（常见的如转账操作）

**五、高可用的数据**

CAP原理：一个提供数据服务的存储系统无法同时满足数据一致性(consistency)、数据可用性(Availability)、分区耐受性(Patition Tolerance,系统具有跨网络分区的伸缩性)。CAP原理对于可伸缩的分布式系统设计具有重要意义，在系统设计开发过程中，不恰当地迎合各种需求，企图打造一个完美的产品，可能会使设计进入两难境地，难以为继。

**六、网站发布**

灰度发布：大型网站的主要业务服务器集群规模非常庞大，一旦发现故障，即使想要发布回滚也需要很长时间才能完成。为了应付这种局面可以将集群服务器分成若干部分，每天只发布一部分服务器，观察运行稳定没有故障，然后继续发布一部分服务器，往往持续几天才把整个集群全部发布完毕，期间如果发现问题，只需要回滚已发布的一部分服务器即可。






























