---
author: 邹政华
comments: true
date: 2013-07-25 13:05:10+00:00
layout: post
slug: '%e8%af%bb%e4%b9%a6%e7%ac%94%e8%ae%b0%ef%bc%9a%e7%b1%bb'
title: 读书笔记：设计与编程
wordpress_id: 150
categories: 编程
---

（摘录自Bjarne Stroustrup《c++程序设计语言》特别版p633-668，在翻译上与原文有差异)

面向对象程序设计和编程中最基本的观念是：程序应该是现实事物的模型。程序里的类代表着应用中的基本概念，真实世界中的对象和实现中所需的实体都通过这些类的对象来表示。本质上说，系统里存在两种类：直接反映应用领域中概念的类；为了实现而人工创造的类，也就是设计师和程序员用于描述他们的实现技术的那些类。

将应用领域中的概念翻译到设计中的类绝不是一个简单的机械性操作，而是需要相当的洞察力。模拟真实世界并不意味着要奴隶式地追随我们之所见，而是要以它们作为设计的出发点、灵感的源泉。举个例子，我的PC屏幕并不真正像我的桌面，尽管其设计支持一种桌面的感觉，而我屏幕上的窗口与那些允许微风吹进我办公室的窗户实体之间只有极少的关系。

程序设计的面向过程和面向对象的观点之间存在着本质性的差异，我们可以将设计集中于所采取的动作或者集中于所表示的实体，但无法同时做到这两者。功能分解方法将导致不充分的数据抽象，所以不适合用于并行开发和并发执行，但这并不意味着在进行“面向对象”的设计中应该避免使用非成员函数或者系统中的任何部分都不能是面向过程的。关键问题在于松弛程序不同部分之间的联系，以更好地反映应用中的概念。典型情况下，将设计工作的基本点放在类上而不是函数上，能更好地达到这个目的。

继承不仅仅是一种实现细节，它可以用来模拟应用领域领域中概念之间的关系。类层次结构并不是每个好程序中必不可少的一部分，但它们能有助于理解应用问题，有助于解的描述。虽然一些人会说“继承破坏了信息隐藏”或者“继承使得c++与其他软件的合作更加困难”，但这些只能作为谨慎行事的理由，而不是禁止使用的理由。

一个强类型的界面能在某种程度上保证软件中只有相互兼容的片段才能通过编译连接到一起，这就使这些软件片段可以对其他片段做出比较强的假设。这些假设由类型系统保证，可以减少运行时检测（动态检查）的使用，从而提高效率。值得指出的是，动态检查和静态检查的运行时间上的差异可能非常明显，动态检查的额外开销通常在3到10倍的样子。

设计工具、库和框架是一种最高形式的设计和编程。为某个应用领域构造出一种有用的基于数学的模型是一种最高形式的分析。这样提供出的工具、语言、框架等将使这种工作的成果能为成千上万的程序员使用，这也是使设计师和程序员逃出陷阱和避免被变成制造某类人工制品的工匠的一种方法。成功的大系统都是多层次的、模块化的、随着时间演化的。

硬把所有东西塞进一个类层次结构里，将会引进一些人为的相似性，并搞模糊真实的关系。只用通过分析揭示出的概念间的共性，或是在设计和编程中发现了结构中存在着有利于实现概念的有用共性时，才 应该使用类层次结构。
