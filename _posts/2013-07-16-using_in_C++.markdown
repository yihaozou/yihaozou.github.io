---
author: 邹政华
comments: true
published: false
date: 2013-07-16 15:33:43+00:00
layout: post
tags: c++
slug: using%e5%a3%b0%e6%98%8e%ef%bc%88using-declaration%e4%b8%8eusing%e6%8c%87%e7%a4%bausing-directive
title: c++ primer-using声明与using指示
wordpress_id: 129
categories: 读书
---

（摘录自Stanley B. Lippman等c++ primer人民邮电出版社英文版第四版，p723）

using声明（using declaration）一次引入命名空间（namespace)中的一个成员,该成员的作用范围是从using声明点开始，直到包含该using声明的作用域结尾。声明的名字仅仅在该作用域是可见，外部作用域中相同的名字被屏蔽。using声明的格式是 “using namespace name::member name", 如"using std::map"用来声明使用std命名空间中的map容器。


using指示（using directives)使得引入的命名空间中的所有成员可见。using指示的形式是“using namespace (namespace name)”,如“using namespace std”表示使用命名空间std。using指示可以出现在命名空间（namespace）、函数或者块（block）中，但不能用于类中（class scope）。


举个例子用来说明using声明和using指示的具体使用，考虑下面的代码样本：

    
    namespace exercise{
          int ivar = 0;
          double dvar = 0;
          const int limit = 1000;
    }
          
    int ivar = 0;
    //position 1
          
    void manip() {
          //position 2
          double dvar = 3.1416;
          int iobj = limit + 1;
          ++ivar;
          ++::ivar;
    }


对于以上代码，如果命名空间exercise中所有成员的using声明放在标记position 1的地方，则exercise中的成员在全局作用域中可见。using exercise::ivar会导致ivar重复定义，引起编译错误；函数manip()中的double dvar = 3.1416声明一个局部的变量dvar,在函数体作用域内它将屏蔽exercise::dvar。

如果命名空间exercise中所有成员的using声明放在标记position 2的地方，则函数manip() 中的double dvar=3.1416是对dvar的重复定义，会引起编译错误；++ivar是对exercise中的ivar加1，++::ivar访问的是全局变量ivar。

如果命名空间exercise的using指示放在标记position 1的地方，则manip中的double dvar  = 3.1416声明了一个局部的变量dvar，在函数体作用域内屏蔽exercise::dvar；++ivar访问的是exercise::ivar，++::ivar访问的是全局变量ivar。

如果命名空间exercise中的using指示放在标记position 2的地方，则exercise中的成员看来好像是声明在全局作用域中一样，manip中的double dvar=3.1416，声明了一个局部变量dvar，在函数体中它将屏蔽exercise::dvar；++ivar出现二义性错误，编译器无法分辨是访问exercise::ivar，还是访问全局变量ivar，而++::ivar访问的是全局变量ivar。
