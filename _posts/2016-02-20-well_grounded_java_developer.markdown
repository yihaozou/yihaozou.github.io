---
author: 邹政华
comments: true
date: 2016-02-20
published: false 
tags: Java
layout: post
title: Java程序员修炼之道－性能调优 
categories: 读书 
---

性能评估的几个指标:等待时间(latency), 吞吐率(throughput), 利用率(utilization)， 效率(efficiency), 容量(capacity), 扩展性(scalability), 退化(degradation)，这里的退化指的是在不增加资源的情况下，增加工作单元或客户端，一般等待时间或吞吐量都会发生变化。

在优化之前需要考虑的几个问题：

- 你正在测量的代码有哪些可观测的环节
- 如何测量那些可观测环节
- 这些可观测环节的目标是什么
- 你怎么判断性能调优是否做好了
- 性能调优可接受的最大支出是多少（投入的时间和增加的代码复杂度）
- 在优化过程中，哪些东西是不能舍弃的


需要对目标有清醒的认识并理解它们的价值，能达成性能目标的90%通常就够了，可以利用节省下来的时间去做些别的事。将大量精力投入到极少用到的代码路径上，通过优化代码来减少程序运行时长的1%，完全是在浪费时间。

程序优化的一些原则：

- 优化那些重要，而不是最容易的代码
- 首先优化那些最重要（通常是调用最频繁）的方法
- 在遇到那些唾手可得的优化时，把它办了，但要清楚代码的调用频率
- 如果再也不需要调试日志，就去掉它
- 可能不是代码导致等待时间过长，环境中其他部分也会产生等待时间
- 最后再做一轮测量工作，以评估优化结果

性能可能会付出的代价

- 占用开发人员的时间
- 引入额外的技术复杂度
- 为了让主线程运行得更快，可能会引入额外得线程来执行辅助任务，但这些线程可能会再负载较高时对系统整体产生不可预料得影响。

过早优化是万恶之源




